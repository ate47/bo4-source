#using scripts\autogenerated\luielems\wz\spectrerisingindicator;
#using scripts\core_common\callbacks_shared;
#using scripts\core_common\clientfield_shared;
#using scripts\core_common\player\player_role;
#using scripts\core_common\system_shared;
#using scripts\core_common\util_shared;
#using scripts\mp_common\item_inventory;
#using scripts\mp_common\item_inventory_util;
#using scripts\mp_common\item_supply_drop;

#namespace wz_highvaluetarget;

// Namespace wz_highvaluetarget/wz_highvaluetarget
// Params 0, eflags: 0x2
// Checksum 0xfb4c20f7, Offset: 0x108
// Size: 0x3c
function autoexec __init__system__()
{
    system::register( #"wz_highvaluetarget", &__init__, undefined, undefined );
}

// Namespace wz_highvaluetarget/wz_highvaluetarget
// Params 0
// Checksum 0xf21f5840, Offset: 0x150
// Size: 0x242
function __init__()
{
    level.wzhighvaluetargets = isdefined( getgametypesetting( #"wzhighvaluetargets" ) ) ? getgametypesetting( #"wzhighvaluetargets" ) : 0;
    
    if ( !( isdefined( level.wzhighvaluetargets ) && level.wzhighvaluetargets ) )
    {
        return;
    }
    
    assert( level.wzhighvaluetargets <= 8 );
    clientfield::register( "allplayers", "ishighvaluetarget", 16000, 1, "int" );
    callback::add_callback( #"hash_405e46788e83af41", &update_targets );
    callback::add_callback( #"hash_7912e21750e4010d", &update_targets );
    callback::add_callback( #"on_player_downed", &function_9141be4e );
    callback::on_player_killed_with_params( &function_3f8e4156 );
    callback::on_disconnect( &on_player_disconnect );
    level.var_45c1873e = [];
    
    for ( i = 0; i < 8 ; i++ )
    {
        level.var_45c1873e[ i ][ #"indicator" ] = spectrerisingindicator::register( "SpectreRisingIndicator_" + i );
        level.var_45c1873e[ i ][ #"clientnum" ] = -1;
    }
}

// Namespace wz_highvaluetarget/wz_highvaluetarget
// Params 0, eflags: 0x4
// Checksum 0xf51b8516, Offset: 0x3a0
// Size: 0x90
function private function_fbb8f1d1()
{
    if ( !isplayer( self ) )
    {
        return;
    }
    
    if ( isdefined( getgametypesetting( #"wzspectrerising" ) ) && getgametypesetting( #"wzspectrerising" ) )
    {
        return self clientfield::get( "hasspectrebody" );
    }
    
    return 1;
}

// Namespace wz_highvaluetarget/wz_highvaluetarget
// Params 0, eflags: 0x4
// Checksum 0x6e8b6eb6, Offset: 0x438
// Size: 0x6f8
function private update_targets()
{
    possibletargets = [];
    
    foreach ( player in getplayers() )
    {
        if ( player clientfield::get( "ishighvaluetarget" ) )
        {
            player clientfield::set( "ishighvaluetarget", 0 );
            
            if ( isalive( player ) )
            {
                player playsoundtoplayer( #"hash_321dbeea036e0e68", player );
                player luinotifyevent( #"hash_6b67aa04e378d681", 1, 12 );
                item_supply_drop::drop_supply_drop( player.origin );
            }
            
            continue;
        }
        
        if ( !isalive( player ) || player inlaststand() || player function_fbb8f1d1() )
        {
            continue;
        }
        
        possibletargets[ possibletargets.size ] = player;
    }
    
    targetcount = 0;
    targetplayers = [];
    
    while ( possibletargets.size > 0 && targetcount < level.wzhighvaluetargets )
    {
        topplayers = function_f81eaa29( possibletargets );
        
        while ( topplayers.size > 0 && targetcount < level.wzhighvaluetargets )
        {
            indicatorarray = level.var_45c1873e[ targetcount ];
            targetcount++;
            randomindex = randomint( topplayers.size );
            player = topplayers[ randomindex ];
            player clientfield::set( "ishighvaluetarget", 1 );
            player playsoundtoplayer( #"hash_6d40de6f3e747fb1", player );
            player luinotifyevent( #"hash_6b67aa04e378d681", 1, 10 );
            indicatorarray[ #"clientnum" ] = player getentitynumber();
            
            foreach ( other_player in getplayers() )
            {
                if ( !indicatorarray[ #"indicator" ] spectrerisingindicator::is_open( other_player ) )
                {
                    indicatorarray[ #"indicator" ] spectrerisingindicator::open( other_player );
                }
                
                var_d1a98222 = 1;
                
                if ( other_player.team == player.team )
                {
                    var_d1a98222 = 0;
                }
                
                indicatorarray[ #"indicator" ] spectrerisingindicator::set_clientnum( other_player, indicatorarray[ #"clientnum" ] );
                indicatorarray[ #"indicator" ] spectrerisingindicator::set_isalive( other_player, var_d1a98222 );
            }
            
            arrayinsert( targetplayers, player, targetplayers.size );
            arrayremovevalue( topplayers, player );
            arrayremovevalue( possibletargets, player );
        }
    }
    
    for ( i = targetcount + 1; i < level.var_45c1873e.size ; i++ )
    {
        indicatorarray = level.var_45c1873e[ i ];
        indicatorarray[ #"clientnum" ] = -1;
        
        foreach ( player in getplayers() )
        {
            if ( indicatorarray[ #"indicator" ] spectrerisingindicator::is_open( player ) )
            {
                indicatorarray[ #"indicator" ] spectrerisingindicator::close( player );
            }
        }
    }
    
    foreach ( player in getplayers() )
    {
        if ( player function_fbb8f1d1() )
        {
            foreach ( target in targetplayers )
            {
                if ( target.team != player.team )
                {
                    player luinotifyevent( #"hash_6b67aa04e378d681", 1, 9 );
                    break;
                }
            }
        }
    }
}

// Namespace wz_highvaluetarget/wz_highvaluetarget
// Params 1, eflags: 0x4
// Checksum 0x3fd6ed6e, Offset: 0xb38
// Size: 0xc6
function private function_f81eaa29( players )
{
    mostkills = 0;
    topplayers = [];
    
    foreach ( player in players )
    {
        if ( player.kills > mostkills )
        {
            mostkills = player.kills;
            topplayers = [];
        }
        
        topplayers[ topplayers.size ] = player;
    }
    
    return topplayers;
}

// Namespace wz_highvaluetarget/wz_highvaluetarget
// Params 0, eflags: 0x4
// Checksum 0xd2ad37ea, Offset: 0xc08
// Size: 0x92
function private function_9141be4e()
{
    if ( !self clientfield::get( "ishighvaluetarget" ) || !isdefined( self.laststandparams ) )
    {
        return;
    }
    
    attacker = self.laststandparams.attacker;
    
    if ( !isplayer( attacker ) )
    {
        return;
    }
    
    self.laststandparams.var_c30b803b = attacker function_fbb8f1d1();
}

// Namespace wz_highvaluetarget/wz_highvaluetarget
// Params 1, eflags: 0x4
// Checksum 0x11c0e43f, Offset: 0xca8
// Size: 0x2bc
function private function_3f8e4156( params )
{
    if ( !self clientfield::get( "ishighvaluetarget" ) )
    {
        return;
    }
    
    self clientfield::set( "ishighvaluetarget", 0 );
    clientnum = self getentitynumber();
    
    foreach ( indicatorarray in level.var_45c1873e )
    {
        if ( clientnum == indicatorarray[ #"clientnum" ] )
        {
            foreach ( player in getplayers() )
            {
                indicatorarray[ #"indicator" ] spectrerisingindicator::set_isalive( player, 0 );
            }
            
            indicatorarray[ #"clientnum" ] = -1;
        }
    }
    
    attacker = params.eattacker;
    
    if ( isdefined( params.laststandparams ) )
    {
        if ( !( isdefined( params.laststandparams.var_c30b803b ) && params.laststandparams.var_c30b803b ) )
        {
            return;
        }
        
        attacker = params.laststandparams.attacker;
    }
    
    if ( !isplayer( attacker ) || attacker.team == self.team || !attacker function_fbb8f1d1() )
    {
        return;
    }
    
    attacker playsoundtoplayer( #"hash_619bf069e410b863", attacker );
    attacker luinotifyevent( #"hash_6b67aa04e378d681", 1, 11 );
    item_supply_drop::drop_supply_drop( attacker.origin );
}

// Namespace wz_highvaluetarget/wz_highvaluetarget
// Params 0, eflags: 0x4
// Checksum 0xe5915992, Offset: 0xf70
// Size: 0x196
function private on_player_disconnect()
{
    if ( !self clientfield::get( "ishighvaluetarget" ) )
    {
        return;
    }
    
    self clientfield::set( "ishighvaluetarget", 0 );
    clientnum = self getentitynumber();
    
    foreach ( indicatorarray in level.var_45c1873e )
    {
        if ( clientnum == indicatorarray[ #"clientnum" ] )
        {
            foreach ( player in getplayers() )
            {
                indicatorarray[ #"indicator" ] spectrerisingindicator::set_isalive( player, 0 );
            }
            
            indicatorarray[ #"clientnum" ] = -1;
        }
    }
}

