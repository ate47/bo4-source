#using scripts\autogenerated\luielems\zm\zm_trial_timer;
#using scripts\core_common\ai\zombie_utility;
#using scripts\core_common\array_shared;
#using scripts\core_common\clientfield_shared;
#using scripts\core_common\flag_shared;
#using scripts\core_common\gameobjects_shared;
#using scripts\core_common\math_shared;
#using scripts\core_common\scene_shared;
#using scripts\core_common\struct;
#using scripts\core_common\system_shared;
#using scripts\core_common\util_shared;
#using scripts\zm\zm_hms_util;
#using scripts\zm\zm_orange_ee_dynamite;
#using scripts\zm\zm_orange_lighthouse;
#using scripts\zm\zm_orange_pap;
#using scripts\zm\zm_orange_special_rounds;
#using scripts\zm_common\util\ai_dog_util;
#using scripts\zm_common\zm_audio;
#using scripts\zm_common\zm_blockers;
#using scripts\zm_common\zm_pack_a_punch;
#using scripts\zm_common\zm_round_spawning;
#using scripts\zm_common\zm_trial_util;
#using scripts\zm_common\zm_unitrigger;
#using scripts\zm_common\zm_utility;
#using scripts\zm_common\zm_utility_zstandard;
#using scripts\zm_common\zm_zonemgr;

#namespace zm_orange_zstandard;

// Namespace zm_orange_zstandard/zm_orange_zstandard
// Params 0
// Checksum 0x981372a4, Offset: 0x940
// Size: 0x14
function main()
{
    init_level_vars();
}

// Namespace zm_orange_zstandard/zm_orange_zstandard
// Params 0
// Checksum 0x4bbadc43, Offset: 0x960
// Size: 0x36c
function init_level_vars()
{
    function_ac904e5e();
    function_7f933d39();
    level.fn_custom_round_ai_spawn = &function_a39e7a56;
    level flag::init( "crevasse_points" );
    level flag::init( "boathouse_points" );
    level flag::init( "lighthouse_points" );
    level flag::init( "station_points" );
    level flag::init( "cargo_points" );
    level flag::init( "beach_points" );
    level flag::init( "forecastle_points" );
    level flag::init( "stern_points" );
    level flag::init( "artifact_points" );
    level flag::init( "gangway_points" );
    level flag::init( "facility_points" );
    level flag::init( #"hash_50990d5b9376f50d" );
    level flag::init( #"hash_13bc135937af9be2" );
    level.var_3f86fd35 = 9;
    level.var_d7853f35 = 18;
    level.var_ecdf38f = 12;
    level.var_55e562f9 = 18;
    level.zombie_hints[ #"default_treasure_chest" ] = #"hash_57a34375dddce337";
    level thread defend_areas();
    level thread function_9217567c();
    level thread init_traps();
    level thread function_f436d901();
    zm_round_spawning::function_2876740e( #"zombie_dog", &function_c7e2bbe2 );
    zm_round_spawning::function_2876740e( #"zombie_electric", &function_ae7c2601 );
    zm_utility::function_2959a3cb( #"zombie_dog", &function_126999be );
    zm_utility::function_2959a3cb( #"zombie_electric", &function_7b3abf7b );
}

// Namespace zm_orange_zstandard/zm_orange_zstandard
// Params 0
// Checksum 0xf2106481, Offset: 0xcd8
// Size: 0xd8c
function defend_areas()
{
    level endon( #"end_game" );
    function_84139b27();
    level.defend_spawns = 0;
    level flag::wait_till( "start_zombie_round_logic" );
    level thread function_80a9077f();
    zm_utility::enable_power_switch( 0 );
    
    /#
        if ( getdvarint( #"hash_b3363e1d25715d7", 0 ) )
        {
            zm_utility::enable_power_switch( 1, 1 );
            level function_1dcc39ae();
            return;
        }
    #/
    
    level flag::set( "power_on1" );
    str_next_defend = #"lighthouse";
    s_defend_area = zm_utility::function_a877cd10( str_next_defend );
    var_420e4589 = [];
    var_49f2dcca = [];
    var_dca419c2 = [];
    zm_utility::function_fdb0368( 3 );
    
    if ( math::cointoss() )
    {
        var_420e4589 = array( "frozen_crevasse_blockers" );
        var_49f2dcca = array( "docks_to_boathouse" );
        level flag::set( "crevasse_points" );
    }
    else
    {
        var_420e4589 = array( "docks_to_boathouse" );
        var_49f2dcca = array( "frozen_crevasse_blockers" );
        level flag::set( "boathouse_points" );
    }
    
    level zm_utility::open_door( var_420e4589, undefined, undefined, 1 );
    zm_utility::function_fdb0368( 4 );
    var_420e4589 = array( "lighthouse_level_1_doors" );
    level zm_utility::open_door( var_420e4589, undefined, undefined, 1 );
    level flag::set( "lighthouse_points" );
    util::delay( 4, undefined, &zm_utility::function_11101458, str_next_defend );
    zm_zonemgr::function_8caa21df( s_defend_area.a_str_zones );
    wait 25;
    zm_utility::function_33798535( s_defend_area.var_39c44288, s_defend_area.a_str_zones, s_defend_area.var_ed1db1a7, undefined, undefined, 45 );
    zm_utility::function_fef4b36a( str_next_defend );
    
    if ( math::cointoss() )
    {
        var_420e4589 = array( "lighthouse_cove_to_lighthouse_station", "lighthouse_station_to_lighthouse_level_2", "lighthouse_station_to_lighthouse_level_3", "beach_to_lighthouse_approach" );
        var_49f2dcca = arraycombine( var_49f2dcca, array( "lighthouse_cove_to_cargo_hold", "main_deck_to_forecastle", "main_deck_to_forecastle_blocker" ), 0, 0 );
        level flag::set( "station_points" );
        level flag::set( "beach_points" );
        str_next_defend = #"beach";
    }
    else
    {
        var_420e4589 = array( "lighthouse_cove_to_cargo_hold", "main_deck_to_forecastle", "main_deck_to_forecastle_blocker" );
        var_49f2dcca = arraycombine( var_49f2dcca, array( "lighthouse_cove_to_lighthouse_station", "lighthouse_station_to_lighthouse_level_2", "lighthouse_station_to_lighthouse_level_3", "beach_to_lighthouse_approach" ), 0, 0 );
        level flag::set( "cargo_points" );
        level flag::set( "forecastle_points" );
        str_next_defend = #"forecastle";
    }
    
    level zm_utility::open_door( var_420e4589, undefined, undefined, 1 );
    s_defend_area = zm_utility::function_a877cd10( str_next_defend );
    zm_round_spawning::function_306ce518( #"zombie_dog", &intro_zombie_dog );
    level thread function_b4cae8b9();
    util::delay( 4, undefined, &zm_utility::function_11101458, str_next_defend );
    zm_zonemgr::function_8caa21df( s_defend_area.a_str_zones );
    wait 25;
    zm_utility::function_33798535( s_defend_area.var_39c44288, s_defend_area.a_str_zones, s_defend_area.var_ed1db1a7, undefined, undefined, 45 );
    level flag::set( #"hash_50990d5b9376f50d" );
    zm_utility::function_fef4b36a( str_next_defend );
    str_next_defend = #"sundeck";
    s_defend_area = zm_utility::function_a877cd10( str_next_defend );
    level.var_a385f14 notify( #"force_extinguisher" );
    zm_orange_lighthouse::function_602d605();
    level flag::set( #"hash_5a3d0402a5557739" );
    
    foreach ( e_pap in level.var_4d8e32c8 )
    {
        if ( !( e_pap.script_noteworthy === "pap_island" ) )
        {
            e_pap thread zm_orange_pap::function_e3921120( 1 );
        }
    }
    
    level thread registerlast_truck_headshot_();
    wait 5;
    
    if ( level flag::get( "beach_points" ) )
    {
        var_420e4589 = array( "beach_to_gangway", "gangway_to_stern" );
        var_49f2dcca = arraycombine( var_49f2dcca, array( "cargo_hold_to_artifact_storage", "artifact_storage_to_forecastle" ), 0, 0 );
        level flag::set( "stern_points" );
    }
    else
    {
        var_420e4589 = array( "cargo_hold_to_artifact_storage", "artifact_storage_to_forecastle" );
        var_49f2dcca = arraycombine( var_49f2dcca, array( "beach_to_gangway", "gangway_to_stern" ), 0, 0 );
        level flag::set( "cargo_hold_to_artifact_storage" );
        level flag::set( "artifact_points" );
    }
    
    var_420e4589 = arraycombine( var_420e4589, array( "gangway_to_main_deck", "gangway_to_navigation", "sun_deck_to_bridge" ), 0, 0 );
    level zm_utility::open_door( var_420e4589, undefined, undefined, 1 );
    level flag::set( "sun_deck_to_bridge" );
    level flag::set( "gangway_points" );
    zm_round_spawning::function_306ce518( #"zombie_electric", &intro_electric_zombie );
    level thread function_6091b49b();
    util::delay( 4, undefined, &zm_utility::function_11101458, str_next_defend );
    zm_zonemgr::function_8caa21df( s_defend_area.a_str_zones );
    wait 25;
    zm_utility::function_33798535( s_defend_area.var_39c44288, s_defend_area.a_str_zones, s_defend_area.var_ed1db1a7, undefined, undefined, 45 );
    level flag::set( #"hash_13bc135937af9be2" );
    level flag::set( "power_on2" );
    level flag::set( #"hash_7d9f8ec3cb9af87e" );
    level flag::clear( "fasttravel_disabled" );
    level flag::set( "ship_flinger_fixed" );
    level flag::set( #"facility_available" );
    level flag::set( "facility_points" );
    zm_utility::function_fef4b36a( str_next_defend );
    
    if ( math::cointoss() )
    {
        str_next_defend = #"decon";
    }
    else
    {
        str_next_defend = #"geo";
    }
    
    s_defend_area = zm_utility::function_a877cd10( str_next_defend );
    var_420e4589 = array( "hidden_path_blocker", "lighthouse_level_3_to_level_4", "decontamination_doors", "geological_processing_doors", "specimen_storage_doors", "upper_catwalk_to_human_infusion_blocker", "grotto_tunnel_blockers" );
    var_420e4589 = arraycombine( var_420e4589, var_49f2dcca, 0, 0 );
    level zm_utility::open_door( var_420e4589, undefined, undefined, 1 );
    level flag::set( "cargo_hold_to_artifact_storage" );
    level thread function_c87db3f7();
    wait 10;
    function_4fe4866f();
    wait 10;
    util::delay( 4, undefined, &zm_utility::function_11101458, str_next_defend );
    zm_zonemgr::function_8caa21df( s_defend_area.a_str_zones );
    wait 45;
    level thread function_c87db3f7();
    zm_utility::function_33798535( s_defend_area.var_39c44288, s_defend_area.a_str_zones, s_defend_area.var_ed1db1a7, undefined, undefined, 45 );
    level flag::set( "power_on3" );
    level flag::set( "facility_flinger_fixed" );
    zm_utility::function_fef4b36a( str_next_defend );
    level function_a97f7327();
    
    for ( i = 0; i < 3 ; i++ )
    {
        zm_orange_ee_dynamite::function_61511fcf( i );
    }
    
    level thread function_466fb0ff( str_next_defend );
}

// Namespace zm_orange_zstandard/zm_orange_zstandard
// Params 0
// Checksum 0x2ce599f3, Offset: 0x1a70
// Size: 0x24
function function_7f933d39()
{
    level flag::set( "fasttravel_disabled" );
}

// Namespace zm_orange_zstandard/zm_orange_zstandard
// Params 1
// Checksum 0xe55aad17, Offset: 0x1aa0
// Size: 0x9c
function function_c87db3f7( str_next_defend )
{
    level waittill( #"creating_zone_defend_area" );
    level flag::wait_till( "started_defend_area" );
    level flag::set( "fasttravel_disabled" );
    level waittill( #"hash_7a04a7fb98fa4e4d" );
    wait 2;
    level flag::clear( "fasttravel_disabled" );
}

// Namespace zm_orange_zstandard/zm_orange_zstandard
// Params 1
// Checksum 0x65b2e1bc, Offset: 0x1b48
// Size: 0x1c
function function_c7e2bbe2( n_max )
{
    return getplayers().size;
}

// Namespace zm_orange_zstandard/zm_orange_zstandard
// Params 1
// Checksum 0xc6b41360, Offset: 0x1b70
// Size: 0x1c
function function_ae7c2601( n_max )
{
    return getplayers().size;
}

// Namespace zm_orange_zstandard/zm_orange_zstandard
// Params 0
// Checksum 0x4e43ac1e, Offset: 0x1b98
// Size: 0x86
function function_74872db6()
{
    if ( level.round_number <= 7 )
    {
        level.var_11f7a9af = 1;
        level.var_18d20774 = 62500;
        level.registertheater_fxanim_kill_trigger_centerterminatetraverse = 62500;
        return;
    }
    
    level.var_2e3a6cbe = undefined;
    level.var_d614a8b4 = undefined;
    level.var_11f7a9af = undefined;
    level.var_18d20774 = undefined;
    level.registertheater_fxanim_kill_trigger_centerterminatetraverse = undefined;
}

// Namespace zm_orange_zstandard/zm_orange_zstandard
// Params 0
// Checksum 0x2ba1404e, Offset: 0x1c28
// Size: 0x54
function function_126999be()
{
    level zm_utility::function_e64ac3b6( 7, #"hash_75a75e4d68452af4" );
    level thread zm_audio::sndannouncerplayvox( #"hellhound", undefined, undefined, undefined, 1 );
}

// Namespace zm_orange_zstandard/zm_orange_zstandard
// Params 0
// Checksum 0xcf181d, Offset: 0x1c88
// Size: 0x5c
function function_7b3abf7b()
{
    level zm_utility::function_e64ac3b6( 17, #"hash_2ab45b2d46ada063" );
    level thread zm_audio::sndannouncerplayvox( #"electric_zombie", undefined, undefined, 3, 1 );
}

// Namespace zm_orange_zstandard/zm_orange_zstandard
// Params 1
// Checksum 0x9da482ef, Offset: 0x1cf0
// Size: 0x9c
function intro_zombie_dog( n_round_number )
{
    level endon( #"hash_7a04a7fb98fa4e4d" );
    n_spawn_count = 0;
    
    while ( n_spawn_count < 3 )
    {
        e_nova_crawler = zombie_dog_util::function_62db7b1c( 1, undefined );
        
        if ( isdefined( e_nova_crawler ) )
        {
            n_spawn_count++;
        }
        
        waitframe( 1 );
    }
    
    zm_utility::function_9b7bc715( #"zombie_dog", 1 );
}

// Namespace zm_orange_zstandard/zm_orange_zstandard
// Params 0
// Checksum 0x67127b77, Offset: 0x1d98
// Size: 0x5c
function function_b4cae8b9()
{
    level flag::wait_till( "started_defend_area" );
    util::delay( 15, "end_game", &zm_round_spawning::function_376e51ef, #"zombie_dog" );
}

// Namespace zm_orange_zstandard/zm_orange_zstandard
// Params 1
// Checksum 0x869fdab9, Offset: 0x1e00
// Size: 0x94
function intro_electric_zombie( n_round_number )
{
    level endon( #"hash_7a04a7fb98fa4e4d" );
    n_spawn_count = 0;
    
    while ( n_spawn_count < 3 )
    {
        e_electric = zm_orange_special_rounds::function_27695a82();
        
        if ( isdefined( e_electric ) )
        {
            n_spawn_count++;
        }
        
        waitframe( 1 );
    }
    
    zm_utility::function_9b7bc715( #"zombie_electric", 1 );
}

// Namespace zm_orange_zstandard/zm_orange_zstandard
// Params 0
// Checksum 0xea1f2f73, Offset: 0x1ea0
// Size: 0x5c
function function_6091b49b()
{
    level flag::wait_till( "started_defend_area" );
    util::delay( 15, "end_game", &zm_round_spawning::function_376e51ef, #"zombie_electric" );
}

// Namespace zm_orange_zstandard/zm_orange_zstandard
// Params 0
// Checksum 0xe6784216, Offset: 0x1f08
// Size: 0x1da, Type: bool
function function_a39e7a56()
{
    if ( level flag::get( #"infinite_round_spawning" ) )
    {
        if ( level.defend_spawns > 8 )
        {
            level.defend_spawns = 0;
            
            if ( level flag::get( #"hash_50990d5b9376f50d" ) )
            {
                ai = zombie_dog_util::function_62db7b1c( 0 );
            }
        }
        else if ( level.defend_spawns == 4 )
        {
            if ( level flag::get( #"hash_13bc135937af9be2" ) )
            {
                ai = zm_orange_special_rounds::function_27695a82();
            }
        }
        else
        {
            s_spawn_point = array::random( level.zm_loc_types[ #"zombie_location" ] );
            ai = zombie_utility::spawn_zombie( getentarray( "zombie_spawner", "script_noteworthy" )[ 0 ], undefined, s_spawn_point );
        }
        
        if ( isdefined( ai ) )
        {
            n_delay = isdefined( zombie_utility::get_zombie_var( #"zombie_spawn_delay" ) ) ? zombie_utility::get_zombie_var( #"zombie_spawn_delay" ) : zombie_utility::get_zombie_var( #"hash_7d5a25e2463f7fc5" );
            level.defend_spawns++;
            wait n_delay;
            return true;
        }
    }
    
    return false;
}

// Namespace zm_orange_zstandard/zm_orange_zstandard
// Params 0
// Checksum 0x91072f1e, Offset: 0x20f0
// Size: 0x94c
function function_84139b27()
{
    zm_utility::function_c492c4d6( "docks", "s_destination_docks", array( "docks_2" ), array( #"sunken", #"lighthouse", #"decon", #"station" ), #"hash_40f8b1314b80b85d", #"hash_6771074908d56993" );
    zm_utility::function_c492c4d6( "lighthouse", "s_destination_lighthouse", array( "lighthouse_level_1", "lighthouse_level_2" ), array( #"beach", #"docks", #"forecastle", #"sunken" ), #"hash_39a57c12eb43e417", #"hash_2cf824933e1a8ac1" );
    zm_utility::function_c492c4d6( "station", "s_destination_station", array( "lighthouse_station" ), array( #"beach", #"sundeck", #"geo", #"infusion" ), #"hash_473af639aa6a1dc5", #"hash_1b75a3705bfd446b" );
    zm_utility::function_c492c4d6( "beach", "s_destination_beach", array( "beach" ), array( #"decon", #"geo", #"station", #"sundeck" ), #"hash_1c2b8784bb8aa590", #"hash_9162184ef7f0220" );
    zm_utility::function_c492c4d6( "sundeck", "s_destination_sundeck", array( "sun_deck", "bridge", "navigation" ), array( #"forecastle", #"station", #"geo", #"storage" ), #"hash_471148d113f50e0c", #"hash_34e048217bee05fc" );
    zm_utility::function_c492c4d6( "forecastle", "s_destination_forecastle", array( "forecastle" ), array( #"sunken", #"sundeck", #"lighthouse", #"crevasse" ), #"hash_6b39e945c6763df5", #"hash_1dd68872a158d43b" );
    zm_utility::function_c492c4d6( "sunken", "s_destination_sunken", array( "sunken_path" ), array( #"forecastle", #"crevasse", #"lighthouse", #"docks" ), #"hash_5a8610793f761a8b", #"hash_117ffcace4813a85" );
    zm_utility::function_c492c4d6( "crevasse", "s_destination_crevasse", array( "frozen_crevasse" ), array( #"forecastle", #"lighthouse", #"station", #"sunken" ), #"hash_44fd8f5db56ca8cd", #"hash_6a7f34c402b66923" );
    zm_utility::function_c492c4d6( "decon", "s_destination_decon", array( "decontamination", "security_lobby" ), array( #"infusion", #"storage", #"docks", #"sundeck" ), #"hash_7e711c2bf9dc32ea", #"hash_2e2da9c51dd43f6" );
    zm_utility::function_c492c4d6( "geo", "s_destination_geo", array( "geological_processing", "security_lobby" ), array( #"infusion", #"storage", #"crevasse", #"docks" ), #"hash_42e3987404caee2e", #"hash_7714e6727380675a" );
    zm_utility::function_c492c4d6( "infusion", "s_destination_infusion", array( "human_infusion" ), array( #"decon", #"beach", #"infusion", #"crevasse" ), #"hash_eb74e8efde96bb6", #"hash_39c6252f8f92d0f2" );
    zm_utility::function_c492c4d6( "storage", "s_destination_storage", array( "specimen_storage" ), array( #"decon", #"beach", #"infusion", #"crevasse" ), #"hash_5571176820f1f5c2", #"hash_28ea515ade07dde" );
    a_str_keys = getarraykeys( level.a_s_defend_areas );
    
    foreach ( s_defend_area in level.a_s_defend_areas )
    {
        foreach ( str_index in s_defend_area.a_str_next_defend )
        {
            str_index = hash( str_index );
            assert( isinarray( a_str_keys, str_index ), str_index + "<dev string:x38>" );
        }
    }
}

// Namespace zm_orange_zstandard/zm_orange_zstandard
// Params 1
// Checksum 0x6b6b3e6e, Offset: 0x2a48
// Size: 0x11a
function function_466fb0ff( str_last_defend )
{
    level endon( #"end_game" );
    str_next_defend = zm_utility::function_40ef77ab( str_last_defend );
    
    for ( var_679cd7a8 = zm_utility::function_a877cd10( str_next_defend ); true ; var_679cd7a8 = zm_utility::function_a877cd10( str_next_defend ) )
    {
        util::delay( 4, undefined, &zm_utility::function_11101458, str_next_defend );
        wait 25;
        level thread function_c87db3f7();
        zm_utility::function_33798535( var_679cd7a8.var_39c44288, var_679cd7a8.a_str_zones, var_679cd7a8.var_ed1db1a7 );
        str_next_defend = zm_utility::function_40ef77ab( str_next_defend );
    }
}

/#

    // Namespace zm_orange_zstandard/zm_orange_zstandard
    // Params 0
    // Checksum 0x82aa32be, Offset: 0x2b70
    // Size: 0x112, Type: dev
    function function_1dcc39ae()
    {
        wait 5;
        str_next_defend = zm_utility::function_40ef77ab( "<dev string:x5f>" );
        var_679cd7a8 = zm_utility::function_a877cd10( str_next_defend );
        zm_utility::enable_power_switch( 1, 1 );
        
        while ( true )
        {
            zm_utility::function_11101458( str_next_defend );
            wait 5;
            zm_utility::function_33798535( var_679cd7a8.var_39c44288, var_679cd7a8.a_str_zones, var_679cd7a8.var_ed1db1a7, undefined, undefined, 3 );
            str_previous_defend = str_next_defend;
            str_next_defend = zm_utility::function_40ef77ab( str_next_defend );
            var_679cd7a8 = zm_utility::function_a877cd10( str_next_defend );
        }
    }

#/

// Namespace zm_orange_zstandard/zm_orange_zstandard
// Params 0
// Checksum 0xad9de3a0, Offset: 0x2c90
// Size: 0x9e
function init_traps()
{
    a_e_traps = getentarray( "zombie_trap", "targetname" );
    
    foreach ( e_trap in a_e_traps )
    {
        e_trap.script_string = "disable_wait_for_power";
    }
}

// Namespace zm_orange_zstandard/zm_orange_zstandard
// Params 0
// Checksum 0x8b18524d, Offset: 0x2d38
// Size: 0x19a
function function_9217567c()
{
    level waittill( #"all_players_spawned" );
    
    foreach ( a_s_crafting in level.var_4fe2f84d )
    {
        foreach ( s_crafting in a_s_crafting )
        {
            if ( isarray( s_crafting.craftfoundry.blueprints ) )
            {
                foreach ( s_blueprint in s_crafting.craftfoundry.blueprints )
                {
                    if ( s_blueprint.name === "zblueprint_shield_zhield_riot" )
                    {
                        s_crafting.blueprint = s_blueprint;
                    }
                }
            }
        }
    }
}

// Namespace zm_orange_zstandard/zm_orange_zstandard
// Params 0
// Checksum 0x5e0160e1, Offset: 0x2ee0
// Size: 0x330
function function_ac904e5e()
{
    zm_utility::function_742f2c18( 1, #"zombie", 8, 6 );
    zm_utility::function_742f2c18( 2, #"zombie", 10, 6 );
    zm_utility::function_742f2c18( 3, #"zombie", 10, 6 );
    zm_utility::function_742f2c18( 4, #"zombie", 10, 6 );
    zm_utility::function_742f2c18( 5, #"zombie", 12, 6 );
    zm_utility::function_742f2c18( 6, #"zombie", 12, 6 );
    zm_utility::function_742f2c18( 7, #"zombie", 12, 8 );
    zm_utility::function_742f2c18( 8, #"zombie", 14, 8 );
    zm_utility::function_742f2c18( 9, #"zombie", 14, 8 );
    zm_utility::function_742f2c18( 10, #"zombie", 14, 10 );
    zm_utility::function_742f2c18( 11, #"zombie", 16, 10 );
    zm_utility::function_742f2c18( 12, #"zombie", 16, 10 );
    zm_utility::function_742f2c18( 13, #"zombie", 16, 12 );
    zm_utility::function_742f2c18( 14, #"zombie", 16, 12 );
    zm_utility::function_742f2c18( 15, #"zombie", 16, 14 );
    zm_utility::function_742f2c18( 16, #"zombie", 20, 14 );
    zm_utility::function_742f2c18( 17, #"zombie", 24, 14 );
    n_zombie_min = 16;
    
    for ( n_round = 18; n_round < 255 ; n_round++ )
    {
        zm_utility::function_742f2c18( n_round, #"zombie", undefined, n_zombie_min );
        n_zombie_min++;
        n_zombie_min = math::clamp( n_zombie_min, 16, 24 );
    }
}

// Namespace zm_orange_zstandard/zm_orange_zstandard
// Params 0
// Checksum 0x330432cc, Offset: 0x3218
// Size: 0xa0
function function_f436d901()
{
    var_83a5fb84 = getentarray( "use_elec_switch", "targetname" );
    
    foreach ( t_switch in var_83a5fb84 )
    {
        t_switch hide();
    }
}

// Namespace zm_orange_zstandard/zm_orange_zstandard
// Params 0
// Checksum 0x620d4b69, Offset: 0x32c0
// Size: 0x4c
function registerlast_truck_headshot_()
{
    level zm_utility::function_7a35b1d7( #"hash_56917185158b9df4" );
    level thread zm_audio::sndannouncerplayvox( #"pap_avail", undefined, undefined, undefined, 1 );
}

// Namespace zm_orange_zstandard/zm_orange_zstandard
// Params 0
// Checksum 0x7368c94b, Offset: 0x3318
// Size: 0x4c
function function_a97f7327()
{
    level zm_utility::function_7a35b1d7( #"hash_299d0a3534135476" );
    level thread zm_audio::sndannouncerplayvox( #"hash_3acd6d72567def3a", undefined, undefined, undefined, 1 );
}

// Namespace zm_orange_zstandard/zm_orange_zstandard
// Params 0
// Checksum 0xa4dad201, Offset: 0x3370
// Size: 0x234
function function_80a9077f()
{
    foreach ( s_zipline_crank in level.a_s_zipline_cranks )
    {
        if ( !( isdefined( s_zipline_crank.var_2e77da49 ) && s_zipline_crank.var_2e77da49 ) )
        {
            s_zipline_crank.e_crank show();
            s_zipline_crank.var_2e77da49 = 1;
            s_zipline_crank notify( #"hash_762e0e4561d25aeb" );
            s_zipline_crank zm_unitrigger::unregister_unitrigger( s_zipline_crank.s_unitrigger );
        }
        
        if ( !( isdefined( s_zipline_crank.var_68a09be4 ) && s_zipline_crank.var_68a09be4 ) )
        {
            if ( s_zipline_crank.str_location === "aft_to_beach" )
            {
                level flag::set( #"hash_7def3e555eba842c" );
            }
            else
            {
                level flag::set( #"hash_e29d662bb90e4bc" );
            }
            
            if ( s_zipline_crank.var_68ae361b == "s_zipline_use_aft_to_beach" )
            {
                s_zipline_crank.var_3bc09679 = struct::get( "scene_zipline_aft", "targetname" );
            }
            else if ( s_zipline_crank.var_68ae361b == "s_zipline_use_lighthouse_to_fore" )
            {
                s_zipline_crank.var_3bc09679 = struct::get( "scene_zipline_fore", "targetname" );
            }
            
            s_zipline_crank.var_3bc09679 thread scene::play( "move_down_9" );
            s_zipline_crank.var_68a09be4 = 1;
            s_zipline_crank notify( #"hash_6c3e5c135959d4ec" );
        }
    }
}

// Namespace zm_orange_zstandard/zm_orange_zstandard
// Params 0
// Checksum 0xf1a97131, Offset: 0x35b0
// Size: 0x130
function function_4fe4866f()
{
    level endon( #"end_game" );
    var_2876a1a4 = getvehiclenode( "vnd_zipline_lighthouse_to_facility_0", "targetname" );
    n_obj_id = gameobjects::get_next_obj_id();
    objective_add( n_obj_id, "active", var_2876a1a4.origin, #"hash_5cfdced70a5a5948" );
    function_da7940a3( n_obj_id, 1 );
    
    foreach ( player in level.players )
    {
        player thread function_f8dc2ddb( n_obj_id );
    }
}

// Namespace zm_orange_zstandard/zm_orange_zstandard
// Params 1
// Checksum 0xe1ec2b4d, Offset: 0x36e8
// Size: 0xc2
function function_f8dc2ddb( n_obj_id )
{
    level endon( #"end_game" );
    self endon( #"disconnect" );
    
    while ( true )
    {
        s_results = self waittill( #"hash_702a9c7f10066b19", #"death" );
        
        if ( s_results.str_location === "lighthouse_to_facility" || s_results._notify === "death" )
        {
            objective_setinvisibletoplayer( n_obj_id, self );
            return;
        }
    }
}

