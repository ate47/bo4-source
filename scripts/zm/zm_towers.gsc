#using scripts\autogenerated\luielems\zm\zm_towers_crowd_meter;
#using scripts\core_common\ai\zombie_utility;
#using scripts\core_common\ai_shared;
#using scripts\core_common\array_shared;
#using scripts\core_common\callbacks_shared;
#using scripts\core_common\clientfield_shared;
#using scripts\core_common\exploder_shared;
#using scripts\core_common\flag_shared;
#using scripts\core_common\fx_shared;
#using scripts\core_common\math_shared;
#using scripts\core_common\scene_shared;
#using scripts\core_common\spawner_shared;
#using scripts\core_common\struct;
#using scripts\core_common\util_shared;
#using scripts\zm\ai\zm_ai_elephant;
#using scripts\zm\powerup\zm_powerup_free_perk;
#using scripts\zm\weapons\zm_weap_bowie;
#using scripts\zm\weapons\zm_weap_riotshield;
#using scripts\zm\zm_towers_achievements;
#using scripts\zm\zm_towers_challenges;
#using scripts\zm\zm_towers_crowd;
#using scripts\zm\zm_towers_gamemodes;
#using scripts\zm\zm_towers_main_quest;
#using scripts\zm\zm_towers_narrative;
#using scripts\zm\zm_towers_pap_quest;
#using scripts\zm\zm_towers_player_spawns;
#using scripts\zm\zm_towers_shield;
#using scripts\zm\zm_towers_side_quests;
#using scripts\zm\zm_towers_special_rounds;
#using scripts\zm\zm_towers_trials;
#using scripts\zm\zm_towers_util;
#using scripts\zm\zm_towers_ww_quest;
#using scripts\zm\zm_towers_zones;
#using scripts\zm_common\load;
#using scripts\zm_common\util\ai_gladiator_util;
#using scripts\zm_common\util\ai_tiger_util;
#using scripts\zm_common\zm;
#using scripts\zm_common\zm_audio;
#using scripts\zm_common\zm_audio_sq;
#using scripts\zm_common\zm_blockers;
#using scripts\zm_common\zm_characters;
#using scripts\zm_common\zm_cleanup_mgr;
#using scripts\zm_common\zm_customgame;
#using scripts\zm_common\zm_devgui;
#using scripts\zm_common\zm_loadout;
#using scripts\zm_common\zm_magicbox;
#using scripts\zm_common\zm_pack_a_punch;
#using scripts\zm_common\zm_pack_a_punch_util;
#using scripts\zm_common\zm_round_logic;
#using scripts\zm_common\zm_score;
#using scripts\zm_common\zm_spawner;
#using scripts\zm_common\zm_transformation;
#using scripts\zm_common\zm_trial;
#using scripts\zm_common\zm_trial_util;
#using scripts\zm_common\zm_utility;
#using scripts\zm_common\zm_wallbuy;
#using scripts\zm_common\zm_weapons;
#using scripts\zm_common\zm_zonemgr;

#namespace zm_towers;

// Namespace zm_towers/zm_towers
// Params 0, eflags: 0x2
// Checksum 0x65372a8a, Offset: 0xee0
// Size: 0xce
function autoexec opt_in()
{
    level.aat_in_use = 1;
    level.bgb_in_use = 1;
    setdvar( #"player_usewaterfriction", 0 );
    setdvar( #"hash_558e57dbb6559778", 1 );
    setdvar( #"r_lightingsunshadowcachedynamicsiegedistance", 3000 );
    level.var_13473346 = 0;
    level.zombie_round_start_delay = 0;
    level.pack_a_punch_camo_index = 151;
    level.pack_a_punch_camo_index_number_variants = 5;
}

// Namespace zm_towers/level_init
// Params 1, eflags: 0x40
// Checksum 0x5a5e94ed, Offset: 0xfb8
// Size: 0x1c06
function event_handler[level_init] main( eventstruct )
{
    setclearanceceiling( 24 );
    zm::init_fx();
    clientfield::register( "clientuimodel", "player_lives", 1, 2, "int" );
    clientfield::register( "scriptmover", "zombie_head_pickup_glow", 1, 1, "int" );
    clientfield::register( "scriptmover", "blue_glow", 1, 1, "int" );
    clientfield::register( "allplayers", "force_pap_models", 1, 1, "int" );
    clientfield::register( "scriptmover", "" + #"chaos_ball", 1, 1, "int" );
    clientfield::register( "scriptmover", "sentinel_artifact_fx_mist", 1, 1, "int" );
    clientfield::register( "world", "crowd_react", 1, 2, "int" );
    clientfield::register( "world", "crowd_react_boss", 1, 1, "int" );
    clientfield::register( "world", "" + #"crowd_react_wave", 1, 1, "int" );
    clientfield::register( "toplayer", "snd_crowd_react", 1, 4, "int" );
    clientfield::register( "world", "special_round_smoke", 1, 1, "int" );
    clientfield::register( "allplayers", "special_round_camera", 1, 2, "int" );
    clientfield::register( "world", "brazier_fire_blue", 1, 2, "int" );
    clientfield::register( "world", "brazier_fire_green", 1, 2, "int" );
    clientfield::register( "world", "brazier_fire_purple", 1, 2, "int" );
    clientfield::register( "world", "brazier_fire_red", 1, 2, "int" );
    clientfield::register( "scriptmover", "head_fire_blue", 1, 1, "int" );
    clientfield::register( "scriptmover", "head_fire_green", 1, 1, "int" );
    clientfield::register( "scriptmover", "head_fire_purple", 1, 1, "int" );
    clientfield::register( "scriptmover", "head_fire_red", 1, 1, "int" );
    clientfield::register( "allplayers", "force_challenge_model", 1, 1, "int" );
    clientfield::register( "scriptmover", "energy_soul", 1, 1, "int" );
    clientfield::register( "scriptmover", "energy_soul_target", 1, 1, "int" );
    clientfield::register( "scriptmover", "banner_soul_burst", 1, 1, "counter" );
    clientfield::register( "actor", "acid_trap_death_fx", 1, 1, "int" );
    clientfield::register( "scriptmover", "trap_switch_green", 1, 1, "int" );
    clientfield::register( "scriptmover", "trap_switch_red", 1, 1, "int" );
    clientfield::register( "scriptmover", "trap_switch_smoke", 1, 1, "int" );
    clientfield::register( "toplayer", "acid_trap_postfx", 1, 1, "int" );
    clientfield::register( "toplayer", "" + #"pickup_dung", 1, 1, "int" );
    clientfield::register( "toplayer", "" + #"hash_2bbcb9e09bd7bb26", 1, 1, "counter" );
    clientfield::register( "scriptmover", "entry_gate_dust", 1, 1, "int" );
    clientfield::register( "world", "" + #"hash_16b9e3d69cb7a017", 1, 1, "int" );
    clientfield::register( "scriptmover", "" + #"hash_42cc4bf5e47478c5", 1, 1, "int" );
    clientfield::register( "scriptmover", "" + #"hash_3b746cf6eec416b2", 1, 1, "int" );
    clientfield::register( "world", "" + #"hash_584e8f7433246444", 1, 1, "int" );
    clientfield::register( "world", "" + #"hash_418c1c843450232b", 1, 1, "int" );
    clientfield::register( "world", "" + #"hash_4d547bf36c6cb2d8", 1, 1, "int" );
    clientfield::register( "world", "" + #"hash_38ba3ad0902aa355", 1, 1, "int" );
    clientfield::register( "world", "" + #"hash_24d7233bb17e6558", 1, 1, "int" );
    clientfield::register( "scriptmover", "" + #"ww_quest_melting", 1, 1, "counter" );
    clientfield::register( "scriptmover", "" + #"hash_2c6f04d08665dbda", 1, 1, "int" );
    clientfield::register( "scriptmover", "" + #"hash_2a332df32456c86f", 1, 1, "int" );
    clientfield::register( "scriptmover", "" + #"hash_48ad84f9cf6a33f0", 1, 1, "counter" );
    clientfield::register( "zbarrier", "" + #"hash_3974bea828fbf7f7", 1, 1, "int" );
    clientfield::register( "zbarrier", "" + #"hash_3a51c9895d4afcf7", 1, 1, "int" );
    clientfield::register( "zbarrier", "" + #"hash_1add6939914df65a", 1, 1, "int" );
    clientfield::register( "zbarrier", "" + #"hash_5dc6f97e5850e1d1", 1, 1, "int" );
    clientfield::register( "toplayer", "" + #"ww_quest_earthquake", 1, 1, "counter" );
    clientfield::register( "world", "" + #"hash_2383fd01b106ced8", 1, 1, "int" );
    clientfield::register( "world", "" + #"hash_3c58464f16d8a1be", 1, 1, "int" );
    clientfield::register( "scriptmover", "" + #"hash_6ff3eb2dd0078a51", 1, 1, "counter" );
    clientfield::register( "world", "" + #"hash_445060dbbf244b04", 1, 1, "int" );
    clientfield::register( "world", "" + #"hash_a2fb645044ed12e", 1, 1, "int" );
    clientfield::register( "scriptmover", "" + #"hash_3f79f6da0222ebc2", 1, 1, "int" );
    clientfield::register( "scriptmover", "" + #"hash_c382c02584ba249", 1, 1, "int" );
    clientfield::register( "scriptmover", "" + #"hash_273efcc293063e5e", 1, 1, "int" );
    clientfield::register( "scriptmover", "" + #"fertilizer_smell", 1, 1, "int" );
    clientfield::register( "world", "" + #"hash_5a3e1454226ef7a4", 1, 1, "int" );
    clientfield::register( "world", "" + #"hash_73088ea3053b96f1", 1, 1, "int" );
    clientfield::register( "actor", "" + #"hash_233e31d0c2b47b1b", 1, 1, "int" );
    clientfield::register( "actor", "" + #"hash_12dfb8249f8212d2", 1, 1, "int" );
    clientfield::register( "actor", "" + #"hash_17e3041649954b9f", 1, 1, "int" );
    clientfield::register( "scriptmover", "ra_eyes_beam_fire", 1, 1, "int" );
    clientfield::register( "scriptmover", "ra_rooftop_eyes_beam_fire", 1, 1, "int" );
    clientfield::register( "world", "" + #"hash_57c08e5f4792690c", 1, 1, "int" );
    clientfield::register( "world", "" + #"hash_440f23773f551a48", 1, 1, "int" );
    clientfield::register( "world", "" + #"hash_4e5e2b411c997804", 1, 1, "int" );
    clientfield::register( "toplayer", "" + #"maelstrom_initiate", 1, 1, "counter" );
    clientfield::register( "world", "" + #"maelstrom_initiate_fx", 1, 1, "int" );
    clientfield::register( "scriptmover", "" + #"maelstrom_conduct", 1, 1, "int" );
    clientfield::register( "scriptmover", "" + #"hash_1814d4cc1867739c", 1, 1, "int" );
    clientfield::register( "scriptmover", "" + #"hash_314d3a2e542805c0", 1, 1, "int" );
    clientfield::register( "scriptmover", "" + #"maelstrom_discharge", 1, 1, "counter" );
    clientfield::register( "actor", "" + #"maelstrom_death", 1, 1, "counter" );
    clientfield::register( "toplayer", "" + #"maelstrom_storm", 1, 1, "int" );
    clientfield::register( "toplayer", "" + #"hash_182c03ff2a21c07c", 1, 1, "counter" );
    clientfield::register( "toplayer", "" + #"maelstrom_ending", 1, 1, "int" );
    clientfield::register( "world", "" + #"hash_1f09a5290d31eb37", 1, 1, "counter" );
    clientfield::register( "scriptmover", "" + #"hash_63e758aa5387132a", 1, 1, "counter" );
    clientfield::register( "scriptmover", "" + #"hash_23ba00d2f804acc2", 1, 1, "int" );
    clientfield::register( "scriptmover", "" + #"hash_2407f687f7d24a83", 1, 1, "int" );
    clientfield::register( "scriptmover", "" + #"hash_5afda864f8b64f5c", 1, 1, "int" );
    clientfield::register( "world", "" + #"hash_39e6b14b9e5b0f3d", 1, 1, "int" );
    level.var_210ce105 = zm_towers_crowd_meter::register( "zm_towers_crowd_meter" );
    level._effect[ #"headshot" ] = #"zombie/fx_bul_flesh_head_fatal_zmb";
    level._effect[ #"headshot_nochunks" ] = #"zombie/fx_bul_flesh_head_nochunks_zmb";
    level._effect[ #"bloodspurt" ] = #"zombie/fx_bul_flesh_neck_spurt_zmb";
    level._effect[ #"animscript_gib_fx" ] = #"zombie/fx_blood_torso_explo_zmb";
    level._effect[ #"animscript_gibtrail_fx" ] = #"blood/fx_blood_gib_limb_trail";
    level._effect[ #"switch_sparks" ] = #"electric/fx8_sparks_burst_dir_sm_orange_os";
    level._effect[ #"hash_21167096dfea3409" ] = #"hash_b6f89a048c38cf6";
    level.default_start_location = "zone_starting_area_ra";
    level.default_game_mode = "zclassic";
    level.var_cd8b6cd0 = 2;
    level thread zm_audio_sq::init();
    
    if ( !zm_utility::is_standard() )
    {
        level.round_wait_func = &function_ebe4d15c;
    }
    
    level.tiger_on_spawned = &function_f1e7bc35;
    level.var_290ac2c3 = &function_f1e7bc35;
    level.var_ea32773 = &function_8e4eff2b;
    level thread zm_towers_special_rounds::init();
    level.var_22fda912 = &function_9f50079d;
    level.zombiemode_offhand_weapon_give_override = &offhand_weapon_give_override;
    level.var_d0ab70a2 = #"gamedata/weapons/zm/zm_towers_weapons.csv";
    level._allow_melee_weapon_switching = 1;
    level.zombiemode_reusing_pack_a_punch = 1;
    level.w_wraithfire = getweapon( #"eq_wraith_fire" );
    callback::on_grenade_fired( &zm_towers_util::function_c05cc102 );
    level.pack_a_punch.custom_power_think = &zm_towers_pap_quest::function_9b917fd5;
    level.var_ef785c4c = 0;
    level.use_powerup_volumes = 1;
    level.var_881e464e = 1;
    level._no_vending_machine_auto_collision = 1;
    level.custom_spawner_entry[ #"crawl" ] = &zm_spawner::function_45bb11e4;
    spawner::add_archetype_spawn_function( #"blight_father", &function_15f5b16c );
    level.var_1c666963 = 96;
    load::main();
    level thread zm_towers_player_spawns::init();
    level.zones = [];
    level.zone_manager_init_func = &zm_towers_zones::zone_init;
    init_zones[ 0 ] = "zone_starting_area_ra";
    level thread zm_zonemgr::manage_zones( init_zones );
    level thread function_63a4a57a();
    level.custom_pandora_show_func = &custom_pandora_show_func;
    level.random_pandora_box_start = 1;
    level.open_chest_location = [];
    level.magic_box_zbarrier_state_func = &zm_magicbox::function_35c66b27;
    level.chest_joker_model = "p8_fxanim_zm_zod_magic_box_skull_mod";
    level.chest_joker_custom_movement = &zm_magicbox::function_f5503c41;
    level thread magicbox_host_migration();
    level thread function_5d95d2ab();
    a_s_boxes = struct::get_array( "treasure_chest_use" );
    
    for ( i = 0; i < a_s_boxes.size ; i++ )
    {
        level.open_chest_location[ i ] = a_s_boxes[ i ].script_noteworthy;
    }
    
    level thread function_c6450415();
    level thread sndfunctions();
    level thread zm_towers_achievements::init();
    level thread zm_towers_crowd::init();
    level thread zm_towers_narrative::init();
    level thread zm_towers_pap_quest::init();
    level thread zm_towers_zones::init();
    level thread zm_towers_ww_quest::init();
    level thread zm_towers_side_quests::init();
    level.vending_machines_powered_on_at_start = 1;
    level flag::set( "power_on" );
    level.var_d5bd7049 = #"hash_30a8de8c86fd7103";
    
    if ( !zm_utility::is_standard() )
    {
        level.var_d0b54199 = &function_b770efae;
        level.custom_door_buy_check = &function_57e80330;
        level thread function_535ff7c4();
    }
    
    a_t_doors = getentarray( "zombie_door", "targetname" );
    array::thread_all( a_t_doors, &function_58a931ce );
    
    /#
        level thread function_2bb502f5();
    #/
    
    level thread setup_drawbridge();
    
    if ( !zm_utility::is_ee_enabled() )
    {
        hidemiscmodels( "narmod" );
    }
    
    level.var_b5079c7c = array( "exp_lgt_ar_accurate_t8", "exp_lgt_ar_fastfire_t8", "exp_lgt_ar_modular_t8", "exp_lgt_ar_stealth_t8", "exp_lgt_bowie", "exp_lgt_lmg_standard_t8", "exp_lgt_pistol_burst_t8", "exp_lgt_pistol_standard_t8", "exp_lgt_shotgun_pump_t8", "exp_lgt_shotgun_trenchgun_t8", "exp_lgt_smg_accurate_t8", "exp_lgt_smg_drum_pistol_t8", "exp_lgt_smg_fastfire_t8", "exp_lgt_smg_handling_t8", "exp_lgt_smg_standard_t8", "exp_lgt_tr_leveraction_t8", "exp_lgt_tr_longburst_t8", "exp_lgt_tr_powersemi_t8" );
    
    if ( zm_trial::is_trial_mode() )
    {
    }
    
    zm_custom::function_a00576dd( &function_7722c6f0, &function_389e7c22, &function_c8ce0a17, undefined );
    level.var_43216bdf = &function_b2b69ce5;
}

// Namespace zm_towers/zm_towers
// Params 1, eflags: 0x4
// Checksum 0x3e5d8c2b, Offset: 0x2bc8
// Size: 0x24
function private function_b2b69ce5( b_game_ended )
{
    if ( !b_game_ended )
    {
        zm_towers_pap_quest::function_18b39e14();
    }
}

// Namespace zm_towers/zm_towers
// Params 0
// Checksum 0x46e7ee86, Offset: 0x2bf8
// Size: 0x44
function function_8e4eff2b()
{
    if ( isdefined( level.var_210ce105 ) )
    {
        array::thread_all( level.players, &zm_towers_crowd::function_51ea46f3, 0, 1 );
    }
}

// Namespace zm_towers/zm_towers
// Params 2
// Checksum 0x7325a944, Offset: 0x2c48
// Size: 0x80, Type: bool
function function_7722c6f0( var_404e4288, var_8dd554ee )
{
    var_6095c0b6 = zm_round_logic::function_4e8157cd( var_404e4288, var_8dd554ee );
    
    if ( isalive( var_6095c0b6.ai_spawned ) )
    {
        zm_transform::function_d2374144( var_6095c0b6.ai_spawned, #"blight_father" );
    }
    
    return true;
}

// Namespace zm_towers/zm_towers
// Params 2
// Checksum 0xce0be6c2, Offset: 0x2cd0
// Size: 0x62, Type: bool
function function_389e7c22( var_404e4288, var_8dd554ee )
{
    if ( math::cointoss() )
    {
        ai = zombie_gladiator_util::function_60e6998a();
    }
    else
    {
        ai = zombie_gladiator_util::function_bb067153();
    }
    
    return true;
}

// Namespace zm_towers/zm_towers
// Params 2
// Checksum 0xc7d32360, Offset: 0x2d40
// Size: 0x10a, Type: bool
function function_c8ce0a17( var_404e4288, var_8dd554ee )
{
    if ( math::cointoss() )
    {
        var_6095c0b6 = zm_round_logic::function_4e8157cd( var_404e4288, var_8dd554ee );
        
        if ( isalive( var_6095c0b6.ai_spawned ) )
        {
            zm_transform::function_d2374144( var_6095c0b6.ai_spawned, array::random( array( #"catalyst_corrosive", #"catalyst_electric", #"catalyst_plasma", #"catalyst_water" ) ) );
        }
    }
    else
    {
        ai = zombie_tiger_util::round_spawn();
    }
    
    return true;
}

// Namespace zm_towers/zm_towers
// Params 0
// Checksum 0xfc7e33a, Offset: 0x2e58
// Size: 0x150
function function_f6e12f01()
{
    a_s_acid_traps = struct::get_array( "s_ww_quest_acid_trap_unitrigger" );
    var_7eb95af0 = arraycopy( level.var_4fe2f84d[ #"zblueprint_trap_hellpools" ] );
    var_7eb95af0 = array::randomize( var_7eb95af0 );
    
    foreach ( s_acid_trap in a_s_acid_traps )
    {
        s_acid_trap zm_towers_ww_quest::function_a58dfad4();
    }
    
    foreach ( var_eea6b8f1 in var_7eb95af0 )
    {
        var_eea6b8f1 zm_towers_ww_quest::function_b4bc6524();
    }
}

// Namespace zm_towers/zm_towers
// Params 0
// Checksum 0x6c7dab0c, Offset: 0x2fb0
// Size: 0x54
function setup_drawbridge()
{
    scene::init( "p8_fxanim_zm_towers_drawbridge_bundle" );
    level flag::wait_till( "connect_odin_zeus_bridge" );
    scene::play( "p8_fxanim_zm_towers_drawbridge_bundle" );
}

// Namespace zm_towers/zm_towers
// Params 0
// Checksum 0x9e1e455e, Offset: 0x3010
// Size: 0x4c
function function_c6450415()
{
    level flag::wait_till( "magicbox_initialized" );
    array::thread_all( level.chests, &function_1789a4cc );
}

// Namespace zm_towers/zm_towers
// Params 0
// Checksum 0xe208332f, Offset: 0x3068
// Size: 0x320
function function_1789a4cc()
{
    switch ( self.script_noteworthy )
    {
        case #"tower_a_chest":
            str_exploder = "exp_lgt_magic_box_odin2";
            break;
        case #"tower_b_chest":
            str_exploder = "exp_lgt_magic_box_zeus2";
            break;
        case #"tower_c_chest":
            str_exploder = "exp_lgt_magic_box_danu2";
            break;
        case #"tower_d_chest":
            str_exploder = "exp_lgt_magic_box_ra2";
            break;
        case #"tower_a_lower_chest":
            str_exploder = "exp_lgt_magic_box_odinb";
            break;
        case #"tower_b_lower_chest":
            str_exploder = "exp_lgt_magic_box_zeusb";
            break;
        case #"tower_c_lower_chest":
            str_exploder = "exp_lgt_magic_box_danub";
            break;
        case #"tower_d_lower_chest":
            str_exploder = "exp_lgt_magic_box_rab";
            break;
        case #"ra_odin_tunnel_chest":
            str_exploder = "exp_lgt_magic_box_cat_swt";
            break;
        case #"danu_zeus_tunnel_chest":
            str_exploder = "exp_lgt_magic_box_cat_net";
            break;
    }
    
    zbarrier = self.zbarrier;
    self flag::init( #"hash_30f92e7370f31c86" );
    
    while ( true )
    {
        str_state = zbarrier zm_magicbox::get_magic_box_zbarrier_state();
        
        switch ( str_state )
        {
            case #"initial":
                if ( !self flag::get( #"hash_30f92e7370f31c86" ) )
                {
                    self flag::set( #"hash_30f92e7370f31c86" );
                    exploder::exploder( str_exploder );
                }
                
                break;
            case #"arriving":
                if ( !self flag::get( #"hash_30f92e7370f31c86" ) )
                {
                    self flag::set( #"hash_30f92e7370f31c86" );
                    exploder::exploder( str_exploder );
                }
                
                break;
            case #"away":
                self flag::clear( #"hash_30f92e7370f31c86" );
                exploder::stop_exploder( str_exploder );
                break;
        }
        
        zbarrier waittill( #"zbarrier_state_change" );
    }
}

// Namespace zm_towers/zm_towers
// Params 0
// Checksum 0xa2b2cacc, Offset: 0x3390
// Size: 0x226
function function_ebe4d15c()
{
    level endon( #"restart_round", #"kill_round_wait" );
    
    /#
        level endon( #"kill_round" );
        
        if ( getdvarint( #"zombie_rise_test", 0 ) )
        {
            level waittill( #"forever" );
        }
        
        if ( zm::cheat_enabled( 2 ) )
        {
            level waittill( #"forever" );
        }
        
        if ( getdvarint( #"zombie_default_max", 0 ) == 0 )
        {
            level waittill( #"forever" );
        }
        
        level thread zm_round_logic::print_zombie_counts();
        level thread zm_round_logic::sndmusiconkillround();
    #/
    
    level.var_4b5a684c = zm_round_logic::get_zombie_count_for_round( level.round_number, level.players.size );
    
    while ( true )
    {
        var_7e5b8365 = level flag::get( #"infinite_round_spawning" ) || zombie_utility::get_current_zombie_count() > 0 || level.zombie_total > 0 || level.intermission;
        
        if ( !var_7e5b8365 || level flag::get( "end_round_wait" ) )
        {
            break;
        }
        
        if ( level flag::get( "round_reset" ) )
        {
            return;
        }
        
        wait 1;
    }
    
    level.var_13473346 = 0;
}

// Namespace zm_towers/zm_towers
// Params 0
// Checksum 0xcc5ade1a, Offset: 0x35c0
// Size: 0xb4
function adjustments_for_solo()
{
    if ( isdefined( level.is_forever_solo_game ) && level.is_forever_solo_game )
    {
        a_door_buys = getentarray( "zombie_door", "targetname" );
        array::thread_all( a_door_buys, &door_price_reduction_for_solo );
        a_debris_buys = getentarray( "zombie_debris", "targetname" );
        array::thread_all( a_debris_buys, &door_price_reduction_for_solo );
    }
}

// Namespace zm_towers/zm_towers
// Params 0
// Checksum 0x1fa83106, Offset: 0x3680
// Size: 0xcc
function door_price_reduction_for_solo()
{
    if ( self.zombie_cost >= 750 )
    {
        self.zombie_cost -= 250;
        
        if ( isdefined( level.var_d0b54199 ) )
        {
            self thread [[ level.var_d0b54199 ]]( self, self.zombie_cost );
            return;
        }
        
        if ( self.targetname == "zombie_door" )
        {
            self zm_utility::set_hint_string( self, "default_buy_door", self.zombie_cost );
            return;
        }
        
        self zm_utility::set_hint_string( self, "default_buy_debris", self.zombie_cost );
    }
}

// Namespace zm_towers/zm_towers
// Params 0
// Checksum 0x6d5d5bfe, Offset: 0x3758
// Size: 0x24
function function_9f50079d()
{
    zm_loadout::register_tactical_grenade_for_level( "zhield_zword_dw", 1 );
}

// Namespace zm_towers/zm_towers
// Params 1
// Checksum 0x25310699, Offset: 0x3788
// Size: 0xc6, Type: bool
function offhand_weapon_give_override( str_weapon )
{
    self endon( #"death" );
    
    if ( zm_loadout::is_tactical_grenade( str_weapon ) && isdefined( self zm_loadout::get_player_tactical_grenade() ) && !self zm_loadout::is_player_tactical_grenade( str_weapon ) )
    {
        self setweaponammoclip( self zm_loadout::get_player_tactical_grenade(), 0 );
        self takeweapon( self zm_loadout::get_player_tactical_grenade() );
    }
    
    return false;
}

// Namespace zm_towers/zm_towers
// Params 0
// Checksum 0xe4a9b5a6, Offset: 0x3858
// Size: 0xc4
function sndfunctions()
{
    if ( zm_utility::is_standard() )
    {
        level.zmannouncerprefix = "rush";
    }
    else
    {
        level.zmannouncerprefix = "prst";
    }
    
    zm_utility::add_sound( "zmb_heavy_door_open", "zmb_heavy_door_open" );
    level thread setupmusic();
    level thread custom_add_vox();
    level thread init_announcer();
    level thread setup_personality_character_exerts();
}

// Namespace zm_towers/zm_towers
// Params 0
// Checksum 0x437e6a93, Offset: 0x3928
// Size: 0x64
function custom_add_vox()
{
    zm_audio::loadplayervoicecategories( #"hash_41c3d60c9fdc1c1a" );
    zm_audio::loadplayervoicecategories( #"hash_5963a3db3032ab46" );
    zm_audio::loadplayervoicecategories( #"hash_54bad987adb5e01d" );
}

// Namespace zm_towers/zm_towers
// Params 0
// Checksum 0xab728915, Offset: 0x3998
// Size: 0x13c
function setupmusic()
{
    zm_audio::musicstate_create( "round_start", 3, "towers_roundstart_1", "towers_roundstart_2", "towers_roundstart_3" );
    zm_audio::musicstate_create( "round_end", 3, "towers_roundend_1", "towers_roundend_2", "towers_roundend_3" );
    zm_audio::musicstate_create( "round_start_special", 3, "towers_roundstart_special_1" );
    zm_audio::musicstate_create( "round_end_special", 3, "towers_roundend_special_1" );
    zm_audio::musicstate_create( "game_over", 5, "towers_death" );
    zm_audio::musicstate_create( "ee_song", 4, "towers_ee_song" );
    zm_audio::musicstate_create( "ee_song_2", 4, "towers_ee_song_2" );
}

// Namespace zm_towers/zm_towers
// Params 0
// Checksum 0x74d20825, Offset: 0x3ae0
// Size: 0x3c8
function setup_personality_character_exerts()
{
    level.exert_sounds[ 1 ][ #"hitmed" ] = "vox_plr_1_exert_pain";
    level.exert_sounds[ 2 ][ #"hitmed" ] = "vox_plr_2_exert_pain";
    level.exert_sounds[ 3 ][ #"hitmed" ] = "vox_plr_3_exert_pain";
    level.exert_sounds[ 4 ][ #"hitmed" ] = "vox_plr_4_exert_pain";
    level.exert_sounds[ 1 ][ #"hitlrg" ] = "vox_plr_1_exert_pain";
    level.exert_sounds[ 2 ][ #"hitlrg" ] = "vox_plr_2_exert_pain";
    level.exert_sounds[ 3 ][ #"hitlrg" ] = "vox_plr_2_exert_pain";
    level.exert_sounds[ 4 ][ #"hitlrg" ] = "vox_plr_3_exert_pain";
    level.exert_sounds[ 1 ][ #"drowning" ] = "vox_plr_1_exert_underwater_air_low";
    level.exert_sounds[ 2 ][ #"drowning" ] = "vox_plr_2_exert_underwater_air_low";
    level.exert_sounds[ 3 ][ #"drowning" ] = "vox_plr_3_exert_underwater_air_low";
    level.exert_sounds[ 4 ][ #"drowning" ] = "vox_plr_4_exert_underwater_air_low";
    level.exert_sounds[ 1 ][ #"cough" ] = "vox_plr_1_exert_gas_cough";
    level.exert_sounds[ 2 ][ #"cough" ] = "vox_plr_2_exert_gas_cough";
    level.exert_sounds[ 3 ][ #"cough" ] = "vox_plr_3_exert_gas_cough";
    level.exert_sounds[ 4 ][ #"cough" ] = "vox_plr_4_exert_gas_cough";
    level.exert_sounds[ 1 ][ #"underwater_emerge" ] = "vox_plr_1_exert_underwater_emerge_breath";
    level.exert_sounds[ 2 ][ #"underwater_emerge" ] = "vox_plr_2_exert_underwater_emerge_breath";
    level.exert_sounds[ 3 ][ #"underwater_emerge" ] = "vox_plr_3_exert_underwater_emerge_breath";
    level.exert_sounds[ 4 ][ #"underwater_emerge" ] = "vox_plr_4_exert_underwater_emerge_breath";
    level.exert_sounds[ 1 ][ #"underwater_gasp" ] = "vox_plr_1_exert_underwater_emerge_gasp";
    level.exert_sounds[ 2 ][ #"underwater_gasp" ] = "vox_plr_2_exert_underwater_emerge_gasp";
    level.exert_sounds[ 3 ][ #"underwater_gasp" ] = "vox_plr_3_exert_underwater_emerge_gasp";
    level.exert_sounds[ 4 ][ #"underwater_gasp" ] = "vox_plr_4_exert_underwater_emerge_gasp";
}

// Namespace zm_towers/zm_towers
// Params 0
// Checksum 0x4bde102b, Offset: 0x3eb0
// Size: 0x844
function init_announcer()
{
    zm_audio::sndannouncervoxadd( #"hash_5f0f1e699aa7e761", #"hash_446a22a4b34cd68d" );
    zm_audio::sndannouncervoxadd( #"hash_7ff858c269b8be00", #"hash_6f7313e32ff14a9e" );
    zm_audio::sndannouncervoxadd( #"hash_260c83bb9470b", #"hash_7f3dee972dfa0bf1" );
    zm_audio::sndannouncervoxadd( #"hash_78c79ed7fe5a14e6", #"hash_739067da8bb4af8c" );
    zm_audio::sndannouncervoxadd( #"hash_2865f19fb8f73873", #"hash_4f6a00a5a3c6564d" );
    zm_audio::sndannouncervoxadd( #"hash_2a8f3ff63eb265a9", #"hash_327de5526794e5f0" );
    zm_audio::sndannouncervoxadd( #"challenges_challenge_completed", #"hash_5b911d862216715d" );
    zm_audio::sndannouncervoxadd( #"challenges_danu_completed", #"hash_fc0a3fb08fac69b" );
    zm_audio::sndannouncervoxadd( #"challenges_ra_completed", #"hash_203f6b90f79090f0" );
    zm_audio::sndannouncervoxadd( #"challenges_odin_completed", #"hash_34daf48f11cac2b1" );
    zm_audio::sndannouncervoxadd( #"challenges_zeus_completed", #"hash_30f4de8cfdfcb5cc" );
    zm_audio::sndannouncervoxadd( #"hash_597c4173f2fd41a4", #"hash_627191d10da7cc2e" );
    zm_audio::sndannouncervoxadd( #"hash_550bed5125d97a89", #"hash_36a8b8db648b289b" );
    zm_audio::sndannouncervoxadd( #"hash_31347fc188da1db6", #"hash_2b7cdada327d66e8" );
    zm_audio::sndannouncervoxadd( #"hash_6c9a2587a2563721", #"hash_195ac056692d16d7" );
    zm_audio::sndannouncervoxadd( #"special_round_start", #"hash_1efab4e86747e0f6" );
    zm_audio::sndannouncervoxadd( #"hash_18134dc5b9b39a96", #"hash_71004562f08075fe" );
    zm_audio::sndannouncervoxadd( #"hash_589679a12150767a", #"hash_37fd0c2a4b8e0a74" );
    zm_audio::sndannouncervoxadd( #"hash_582eea77824b014d", #"hash_38dd82e156d0465" );
    zm_audio::sndannouncervoxadd( #"hash_4abb12b14a38d2e9", #"hash_eabdfb2bae6559b" );
    zm_audio::sndannouncervoxadd( #"hash_5cc500f9282cd290", #"hash_67a5ea42470ad330" );
    zm_audio::sndannouncervoxadd( #"hash_15f5946d4968f144", #"hash_279f089aafe9045e" );
    zm_audio::sndannouncervoxadd( #"hash_20c64c155f7a0065", #"hash_21bdbf69a0d0a799" );
    zm_audio::sndannouncervoxadd( #"hash_355567a6fa6d44d1", #"hash_594f2e892ce6cc37" );
    zm_audio::sndannouncervoxadd( #"pap_quest_completed", #"hash_20930393d4b597bd" );
    zm_audio::sndannouncervoxadd( #"hash_28dbb5b91d8a954e", #"hash_2b2a7c0ea867948e" );
    zm_audio::sndannouncervoxadd( #"hash_3d5fccf222ba3ab6", #"hash_2b150384d50cde7c" );
    zm_audio::sndannouncervoxadd( #"hash_5719edb294612f4c", #"hash_e36933881b70a00" );
    zm_audio::sndannouncervoxadd( #"hash_42bbe4989b9a4cbe", #"hash_7ce238dcabc6916d" );
    zm_audio::sndannouncervoxadd( #"hash_41d25c641d7c8484", #"hash_21f31b9d98f1e332" );
    zm_audio::sndannouncervoxadd( #"hash_bc10546af7f7b09", #"hash_2c87f4c5bf8b38f4" );
    zm_audio::sndannouncervoxadd( #"hash_70f3ffdacf094858", #"hash_59983ce3c5c98bea" );
    zm_audio::sndannouncervoxadd( #"hash_5b34919a0ea0ac80", #"hash_6394a17f6fd9a269" );
    zm_audio::sndannouncervoxadd( #"hash_50cc6c9d88534d5c", #"hash_34eb08732349aadf" );
    zm_audio::sndannouncervoxadd( #"hash_412f0a99d31887f", #"hash_4950f09ba2a9a065" );
    zm_audio::sndannouncervoxadd( #"hash_73183fb7534361f", #"hash_f9de473901d0e7d" );
    zm_audio::sndannouncervoxadd( #"hash_6211a32e1a9f23fa", #"hash_518bb65266b74f86" );
    zm_audio::sndannouncervoxadd( #"hash_24e22336a0d988d0", #"hash_7af55f23689f2eb4" );
    zm_audio::sndannouncervoxadd( #"hash_43b0860b33146764", #"hash_2cef54d67ed44093" );
    zm_audio::sndannouncervoxadd( #"hash_c8182d04e7f43c9", #"hash_5850b57ef4133eea" );
    zm_audio::sndannouncervoxadd( #"hash_77080de04389f4df", #"hash_33d02faecbf4ced5" );
    zm_audio::sndannouncervoxadd( #"hash_1b8dd2e5977116cb", #"hash_58fcefd43425141f" );
    zm_audio::sndannouncervoxadd( #"hash_436d318af3fd771f", #"hash_5e7804dc338f11b6" );
    zm_audio::sndannouncervoxadd( #"hash_62c7007e0bc4eab6", #"hash_621cc4c04ffd6c81" );
}

// Namespace zm_towers/zm_towers
// Params 0
// Checksum 0x1675a87, Offset: 0x4700
// Size: 0x2fe
function function_63a4a57a()
{
    level endon( #"end_game" );
    vol_arena = getent( "vol_arena", "targetname" );
    var_d4061661 = array( #"zone_starting_area_tunnel", #"zone_starting_area_center", #"zone_starting_area_danu", #"zone_starting_area_ra", #"zone_starting_area_odin", #"zone_starting_area_zeus", #"zone_danu_hallway", #"zone_ra_hallway", #"zone_odin_hallway", #"zone_zeus_hallway" );
    level flag::wait_till( "all_players_spawned" );
    
    while ( true )
    {
        wait 1;
        var_c83ad6e3 = 0;
        
        foreach ( e_player in util::get_active_players() )
        {
            if ( e_player zm_zonemgr::is_player_in_zone( var_d4061661 ) )
            {
                var_c83ad6e3 = 1;
                break;
            }
        }
        
        foreach ( ai_zombie in getaiarray() )
        {
            if ( !isdefined( ai_zombie.var_4935908f ) && isdefined( ai_zombie.b_ignore_cleanup ) && ai_zombie.b_ignore_cleanup )
            {
                continue;
            }
            
            if ( var_c83ad6e3 && ai_zombie istouching( vol_arena ) )
            {
                ai_zombie.b_ignore_cleanup = 1;
                ai_zombie.var_4935908f = 1;
                continue;
            }
            
            if ( isdefined( ai_zombie.var_4935908f ) && ai_zombie.var_4935908f )
            {
                ai_zombie.var_4935908f = 0;
                ai_zombie.b_ignore_cleanup = 0;
            }
        }
    }
}

// Namespace zm_towers/zm_towers
// Params 1
// Checksum 0x30cfb186, Offset: 0x4a08
// Size: 0x2d6
function function_f1e7bc35( s_spot )
{
    self endon( #"death" );
    
    if ( isdefined( s_spot.var_c104f8c7 ) && s_spot.var_c104f8c7 )
    {
        return;
    }
    
    if ( level flag::get( "special_round" ) )
    {
        self thread zm_towers_special_rounds::function_461a99a5( s_spot );
    }
    
    switch ( self.archetype )
    {
        case #"tiger":
            str_scene = s_spot.scriptbundlename;
            
            if ( isdefined( s_spot.var_1b4b343d ) )
            {
                self.var_1b4b343d = s_spot.var_1b4b343d;
            }
            
            break;
        case #"gladiator":
            str_scene = s_spot.var_5b15e8cd;
            
            if ( self.subarchetype == #"gladiator_marauder" )
            {
                str_scene = s_spot.var_f8f13141;
            }
            
            break;
    }
    
    if ( !level flag::get( "special_round" ) )
    {
        str_gate = s_spot.script_gate;
        
        if ( isdefined( str_gate ) )
        {
            mdl_gate = getent( s_spot.script_gate, "script_gate" );
            
            if ( !isdefined( mdl_gate ) )
            {
                mdl_gate = getent( s_spot.script_gate, "targetname" );
            }
            
            self thread function_dccf4bb9( mdl_gate );
            
            if ( !isdefined( str_scene ) )
            {
                self thread function_6f26118c( mdl_gate );
            }
        }
    }
    
    if ( !isdefined( str_scene ) )
    {
        return;
    }
    
    var_478f47cb = 0;
    
    if ( !isdefined( self.var_1df64653 ) )
    {
        var_478f47cb = 1;
        self.var_1df64653 = 1;
    }
    
    if ( isdefined( s_spot.script_gate ) )
    {
        self scene::play( str_scene, self );
    }
    else
    {
        level scene::play( str_scene, self );
    }
    
    self notify( #"hash_1d525fe23da088ca" );
    
    if ( self.archetype == #"gladiator" )
    {
        self notify( #"hash_7ff69a201a93f099" );
    }
    
    if ( var_478f47cb )
    {
        self.var_1df64653 = undefined;
    }
}

// Namespace zm_towers/zm_towers
// Params 1
// Checksum 0x65830913, Offset: 0x4ce8
// Size: 0x78
function function_dccf4bb9( mdl_gate )
{
    if ( !isdefined( mdl_gate.var_408d5ee6 ) )
    {
        mdl_gate.var_408d5ee6 = 0;
        mdl_gate thread function_97678f00();
    }
    
    mdl_gate.var_408d5ee6++;
    self waittill( #"death", #"hash_1d525fe23da088ca" );
    mdl_gate.var_408d5ee6--;
}

// Namespace zm_towers/zm_towers
// Params 1
// Checksum 0xb041eb0, Offset: 0x4d68
// Size: 0xb6
function function_6f26118c( mdl_gate )
{
    self endoncallback( &function_f493ba80, #"death" );
    vol_gate = getent( mdl_gate.target, "targetname" );
    
    while ( !self istouching( vol_gate ) )
    {
        waitframe( 1 );
    }
    
    while ( self istouching( vol_gate ) )
    {
        waitframe( 1 );
    }
    
    self notify( #"hash_1d525fe23da088ca" );
}

// Namespace zm_towers/zm_towers
// Params 1
// Checksum 0x1d04d1c9, Offset: 0x4e28
// Size: 0x1e
function function_f493ba80( notifyhash )
{
    self notify( #"hash_1d525fe23da088ca" );
}

// Namespace zm_towers/zm_towers
// Params 0
// Checksum 0x585ca5da, Offset: 0x4e50
// Size: 0x126
function function_97678f00()
{
    while ( true )
    {
        while ( self.var_408d5ee6 == 0 )
        {
            waitframe( 1 );
        }
        
        v_amount = vectorscale( self.script_vector, 1 );
        self moveto( self.origin + v_amount, 1 );
        self playsound( #"hash_75a2099e8df5a448" );
        self waittill( #"movedone" );
        
        while ( self.var_408d5ee6 > 0 )
        {
            waitframe( 1 );
        }
        
        v_amount = vectorscale( self.script_vector, -1 );
        self moveto( self.origin + v_amount, 1 );
        self playsound( #"hash_40e8e3be1a559184" );
        self waittill( #"movedone" );
    }
}

// Namespace zm_towers/zm_towers
// Params 0
// Checksum 0x1c9944da, Offset: 0x4f80
// Size: 0x4c
function function_5d95d2ab()
{
    zm_blockers::function_6f01c3cf( "zm_towers_start_boards_open", "script_label" );
    zm_blockers::function_6f01c3cf( "zm_towers_start_boards_open_hidden", "script_label", 1 );
}

// Namespace zm_towers/zm_towers
// Params 3
// Checksum 0x320b0a11, Offset: 0x4fd8
// Size: 0x3c
function custom_pandora_show_func( anchor, anchortarget, pieces )
{
    if ( !isdefined( self.pandora_light ) )
    {
        self thread custom_pandora_fx_func();
    }
}

// Namespace zm_towers/zm_towers
// Params 0
// Checksum 0x654c8b52, Offset: 0x5020
// Size: 0x20c
function custom_pandora_fx_func()
{
    self endon( #"death" );
    self.pandora_light = spawn( "script_model", self.zbarrier.origin );
    s_pandora_fx_pos_override = struct::get( self.target, "targetname" );
    
    if ( isdefined( s_pandora_fx_pos_override ) && s_pandora_fx_pos_override.script_noteworthy === "pandora_fx_pos_override" )
    {
        self.pandora_light.origin = s_pandora_fx_pos_override.origin;
    }
    
    self.pandora_light.angles = self.zbarrier.angles + ( -90, 0, -90 );
    self.pandora_light setmodel( #"tag_origin" );
    
    if ( !( isdefined( level._box_initialized ) && level._box_initialized ) )
    {
        level flag::wait_till( "start_zombie_round_logic" );
        level._box_initialized = 1;
    }
    
    wait 1;
    
    if ( isdefined( self ) && isdefined( self.pandora_light ) )
    {
        if ( self.zbarrier.script_string === "t8_magicbox" )
        {
            playfxontag( level._effect[ #"hash_21167096dfea3409" ], self.pandora_light, "tag_origin" );
            return;
        }
        
        playfxontag( level._effect[ #"lght_marker" ], self.pandora_light, "tag_origin" );
    }
}

// Namespace zm_towers/zm_towers
// Params 0
// Checksum 0x286461b2, Offset: 0x5238
// Size: 0x1cc
function magicbox_host_migration()
{
    level endon( #"end_game" );
    level notify( #"mb_hostmigration" );
    level endon( #"mb_hostmigration" );
    
    while ( true )
    {
        level waittill( #"host_migration_end" );
        
        if ( !isdefined( level.chests ) )
        {
            continue;
        }
        
        foreach ( chest in level.chests )
        {
            if ( !( isdefined( chest.hidden ) && chest.hidden ) )
            {
                if ( isdefined( chest ) && isdefined( chest.pandora_light ) )
                {
                    if ( chest.zbarrier.script_string === "t8_magicbox" )
                    {
                        playfxontag( level._effect[ #"hash_21167096dfea3409" ], chest.pandora_light, "tag_origin" );
                    }
                    else
                    {
                        playfxontag( level._effect[ #"lght_marker" ], chest.pandora_light, "tag_origin" );
                    }
                }
            }
            
            util::wait_network_frame();
        }
    }
}

// Namespace zm_towers/zm_towers
// Params 0
// Checksum 0x5b4609bb, Offset: 0x5410
// Size: 0x12
function function_15f5b16c()
{
    self.b_ignore_cleanup = 1;
}

// Namespace zm_towers/zm_towers
// Params 0
// Checksum 0x3f91ac7d, Offset: 0x5430
// Size: 0xd0
function function_535ff7c4()
{
    level flag::wait_till( "all_players_spawned" );
    a_t_doors = getentarray( "zombie_door", "targetname" );
    
    foreach ( t_door in a_t_doors )
    {
        t_door thread function_b770efae( t_door, t_door.zombie_cost );
    }
}

// Namespace zm_towers/zm_towers
// Params 2
// Checksum 0xb43ea014, Offset: 0x5508
// Size: 0x7c
function function_b770efae( t_door, n_cost )
{
    if ( isdefined( t_door.var_c947f134 ) && t_door.var_c947f134 )
    {
        t_door sethintstring( level.var_d5bd7049 );
        return;
    }
    
    t_door zm_utility::set_hint_string( t_door, "default_buy_door", n_cost );
}

// Namespace zm_towers/zm_towers
// Params 1
// Checksum 0xc4a76c66, Offset: 0x5590
// Size: 0x2a
function function_57e80330( t_door )
{
    var_e1223439 = !isdefined( t_door.var_c947f134 );
    return var_e1223439;
}

// Namespace zm_towers/zm_towers
// Params 0
// Checksum 0xb488d51, Offset: 0x55c8
// Size: 0x8c
function function_58a931ce()
{
    if ( !isdefined( self.var_f5325380 ) )
    {
        return;
    }
    
    var_586fa0ec = getent( self.var_f5325380, "prefabname" );
    
    if ( !isdefined( var_586fa0ec ) )
    {
        var_586fa0ec = getent( self.var_f5325380, "targetname" );
    }
    
    self waittill( #"door_opened" );
    var_586fa0ec delete();
}

// Namespace zm_towers/zm_towers
// Params 0
// Checksum 0x3f280605, Offset: 0x5660
// Size: 0xec
function function_5b2f92b3()
{
    var_8011b2df = getentarray( "lore_room", "targetname" );
    
    foreach ( e_door in var_8011b2df )
    {
        e_door delete();
    }
    
    exploder::exploder( "exp_lgt_body_pit_secret_room" );
    clientfield::set( "" + #"hash_2383fd01b106ced8", 1 );
}

// Namespace zm_towers/zm_towers
// Params 1
// Checksum 0xcc47c9bc, Offset: 0x5758
// Size: 0x204
function setup_end_igc( var_24486b2e = 1 )
{
    level flag::clear( "spawn_zombies" );
    level flag::set( #"pause_round_timeout" );
    mdl_pedestal = getent( "mdl_maelstrom_initiate", "targetname" );
    mdl_pedestal_on = getent( "mdl_maelstrom_initiate_on", "targetname" );
    
    if ( isdefined( mdl_pedestal ) )
    {
        mdl_pedestal delete();
    }
    
    if ( isdefined( mdl_pedestal_on ) )
    {
        mdl_pedestal_on delete();
    }
    
    if ( var_24486b2e )
    {
        level zm_utility::function_9ad5aeb1( 0, 1, 1, 1, 0 );
        level.var_5791d548 = 1;
        zombie_doors = getentarray( "zombie_door", "targetname" );
        level zm_blockers::function_5989dd12( zombie_doors );
        level.var_5791d548 = undefined;
        
        foreach ( s_box in level.chests )
        {
            s_box thread zm_magicbox::hide_chest( 0 );
        }
    }
    
    util::set_lighting_state( 1 );
}

/#

    // Namespace zm_towers/zm_towers
    // Params 0
    // Checksum 0x56e64a74, Offset: 0x5968
    // Size: 0xf6, Type: dev
    function function_643aeb5b()
    {
        level endon( #"end_game", #"hash_70406f82f80feda9" );
        zm_devgui::zombie_devgui_open_sesame();
        level flag::clear( "<dev string:x38>" );
        level flag::set( #"pause_round_timeout" );
        level zm_utility::function_9ad5aeb1( 1 );
        array::thread_all( level.players, &zm_towers_crowd::function_51ea46f3, 0, 1 );
        
        while ( level.var_a9ae3ceb )
        {
            level scene::play( "<dev string:x48>" );
            waitframe( 1 );
        }
    }

    // Namespace zm_towers/zm_towers
    // Params 0
    // Checksum 0x86c508eb, Offset: 0x5a68
    // Size: 0x12e, Type: dev
    function function_1ccb7366()
    {
        level endon( #"end_game", #"hash_71cb0d80cda209f1" );
        level flag::clear( "<dev string:x38>" );
        level flag::set( #"pause_round_timeout" );
        level zm_utility::function_9ad5aeb1( 0, 0, 1 );
        level thread scene::play( "<dev string:x60>", "<dev string:x79>" );
        array::thread_all( level.players, &zm_towers_crowd::function_51ea46f3, 0, 1 );
        
        while ( level.var_68d47b4e )
        {
            level thread function_72e2cc56();
            level scene::play( "<dev string:x86>" );
            waitframe( 1 );
        }
    }

    // Namespace zm_towers/zm_towers
    // Params 0
    // Checksum 0x28ac4e23, Offset: 0x5ba0
    // Size: 0x168, Type: dev
    function function_72e2cc56()
    {
        level endon( #"end_game" );
        s_glyphs = struct::get( "<dev string:x9b>" );
        s_flames = struct::get( "<dev string:xae>" );
        
        while ( level.var_68d47b4e )
        {
            level waittill( #"mvid_fire_trap" );
            fx_glyphs = fx::play( "<dev string:xc6>", s_glyphs.origin, s_glyphs.angles, "<dev string:xec>" );
            waitframe( 1 );
            fx_fire = fx::play( "<dev string:x106>", s_flames.origin, s_flames.angles, "<dev string:xec>" );
            level waittill( #"mvid_shutdown_fire_trap", #"hash_71cb0d80cda209f1" );
            fx_fire delete();
            fx_glyphs delete();
        }
    }

    // Namespace zm_towers/zm_towers
    // Params 0
    // Checksum 0x446bbf57, Offset: 0x5d10
    // Size: 0x116, Type: dev
    function function_ef3f5ee5()
    {
        level endon( #"end_game", #"hash_2231f086364099b7" );
        level flag::clear( "<dev string:x38>" );
        level flag::set( #"pause_round_timeout" );
        array::thread_all( level.players, &zm_towers_crowd::function_51ea46f3, 0, 1 );
        scene::init_streamer( #"cin_zm_mvid_pack_a_punch_react", #"allies" );
        
        while ( level.var_7292cf15 )
        {
            level thread function_79aa236();
            level scene::play( "<dev string:x12c>" );
            waitframe( 1 );
        }
    }

    // Namespace zm_towers/zm_towers
    // Params 0
    // Checksum 0x4327c14c, Offset: 0x5e30
    // Size: 0x314, Type: dev
    function function_79aa236()
    {
        level waittill( #"mvid_place_head" );
        a_mdl_heads = getentarray( "<dev string:x14d>", "<dev string:x79>" );
        
        foreach ( mdl_head in a_mdl_heads )
        {
            mdl_head show();
        }
        
        a_mdl_heads = getentarray( "<dev string:x14d>", "<dev string:x79>" );
        array::thread_all( a_mdl_heads, &zm_towers_pap_quest::function_9b320791 );
        level thread scene::play( "<dev string:x162>" );
        level thread scene::play( "<dev string:x196>", "<dev string:x1cc>" );
        level thread scene::play( "<dev string:x1d5>", "<dev string:x1cc>" );
        level thread scene::play( "<dev string:x20b>", "<dev string:x1cc>" );
        level thread scene::play( "<dev string:x241>", "<dev string:x1cc>" );
        level waittill( #"mvid_pap_explosion" );
        level thread scene::play( "<dev string:x277>" );
        level thread scene::play( "<dev string:x2a4>" );
        level waittill( #"hash_61ed5ad857c2709c" );
        
        foreach ( mdl_head in a_mdl_heads )
        {
            mdl_head hide();
        }
        
        level thread scene::init( "<dev string:x277>" );
        level thread scene::init( "<dev string:x2ce>" );
        level thread scene::init( "<dev string:x2a4>" );
        level thread scene::init( "<dev string:x162>" );
    }

    // Namespace zm_towers/zm_towers
    // Params 0
    // Checksum 0xa49a18e5, Offset: 0x6150
    // Size: 0x366, Type: dev
    function function_2bb502f5()
    {
        zm_devgui::add_custom_devgui_callback( &function_8d6c5e6e );
        adddebugcommand( "<dev string:x2f9>" );
        adddebugcommand( "<dev string:x34a>" );
        adddebugcommand( "<dev string:x3b6>" );
        adddebugcommand( "<dev string:x3fc>" );
        adddebugcommand( "<dev string:x44e>" );
        adddebugcommand( "<dev string:x4ae>" );
        adddebugcommand( "<dev string:x50f>" );
        adddebugcommand( "<dev string:x56e>" );
        adddebugcommand( "<dev string:x5c6>" );
        adddebugcommand( "<dev string:x621>" );
        adddebugcommand( "<dev string:x67c>" );
        adddebugcommand( "<dev string:x6d3>" );
        adddebugcommand( "<dev string:x72e>" );
        adddebugcommand( "<dev string:x789>" );
        adddebugcommand( "<dev string:x7ed>" );
        adddebugcommand( "<dev string:x84f>" );
        adddebugcommand( "<dev string:x8ab>" );
        adddebugcommand( "<dev string:x907>" );
        adddebugcommand( "<dev string:x96d>" );
        adddebugcommand( "<dev string:x9df>" );
        adddebugcommand( "<dev string:xa51>" );
        
        if ( getdvarint( #"zm_debug_ee", 0 ) )
        {
            adddebugcommand( "<dev string:xac5>" );
            adddebugcommand( "<dev string:xb0c>" );
            adddebugcommand( "<dev string:xb5e>" );
            adddebugcommand( "<dev string:xbb0>" );
            adddebugcommand( "<dev string:xc02>" );
            adddebugcommand( "<dev string:xc54>" );
            adddebugcommand( "<dev string:xca4>" );
            adddebugcommand( "<dev string:xcf4>" );
            adddebugcommand( "<dev string:xd44>" );
            adddebugcommand( "<dev string:xd94>" );
            adddebugcommand( "<dev string:xdd7>" );
        }
        
        level.var_b9714a5d = &function_51855e65;
    }

    // Namespace zm_towers/zm_towers
    // Params 1
    // Checksum 0xdea6cccf, Offset: 0x64c0
    // Size: 0x9f2, Type: dev
    function function_8d6c5e6e( cmd )
    {
        switch ( cmd )
        {
            case #"play_end_igc":
                level thread function_ddb8acde();
                return 1;
            case #"hash_4c5e426034ea40ef":
                level notify( #"quit_crying" );
                level.s_remus.var_12b6c455 = 4;
                level thread zm_towers_narrative::function_2cb83322( #"hash_1404102ec1359017", #"hash_71fcbb6090ff031e" );
                break;
            case #"hash_4c5e436034ea42a2":
                level notify( #"quit_crying" );
                level.s_remus.var_12b6c455 = 5;
                level thread zm_towers_narrative::function_2cb83322( #"hash_1736e8c7a79a7db8", #"hash_2251bd5cecd3ebdb" );
                break;
            case #"hash_4c5e446034ea4455":
                level notify( #"quit_crying" );
                level.s_remus.var_12b6c455 = 6;
                level thread zm_towers_narrative::function_2cb83322( #"hash_642834b4c1587ac9", #"hash_6b02638730f2f88c" );
                break;
            case #"hash_4c5e3d6034ea3870":
                level notify( #"quit_crying" );
                level.s_remus.var_12b6c455 = 7;
                level thread zm_towers_narrative::function_2cb83322( #"hash_4ccddcb7cba5b2d2", #"hash_2897f70604cc0fb6" );
                break;
            case #"hash_efd8532550aae92":
                level.s_remus.var_12b6c455 = 8;
                level thread zm_towers_narrative::function_d6e81c01( #"hash_4832047b1941ace1", #"hash_3501eab062d8e553" );
                break;
            case #"hash_efd8432550aacdf":
                level.s_remus.var_12b6c455 = 9;
                level thread zm_towers_narrative::function_d6e81c01( #"hash_2ee2e728ad3b547e", #"hash_4aca0608bf4fa64e" );
                break;
            case #"hash_efd8332550aab2c":
                level.s_remus.var_12b6c455 = 10;
                level thread zm_towers_narrative::function_d6e81c01( #"hash_48477035102bb86f", #"hash_38bae751fa353d99" );
                break;
            case #"hash_efd8232550aa979":
                level.s_remus.var_12b6c455 = 11;
                level thread zm_towers_narrative::function_d6e81c01( #"hash_49fb781467abd24c", #"hash_634818c98eff6728" );
                break;
            case #"hash_63968ec6789bd654":
                mdl_wall = level.s_remus.a_objects[ 14 ];
                mdl_wall scene::play( #"p8_fxanim_zm_towers_wall_2_bundle", mdl_wall );
                break;
            case #"hash_36c98a2b5fcf250c":
                level flag::set( #"hash_6205682540170b8" );
                level clientfield::set( "<dev string:xe1d>" + #"hash_39e6b14b9e5b0f3d", 1 );
                break;
            case #"hash_5f00c356627b87c":
                if ( isdefined( level.var_68d47b4e ) && level.var_68d47b4e )
                {
                    level.var_68d47b4e = 0;
                }
                else
                {
                    level.var_68d47b4e = 1;
                    level thread function_1ccb7366();
                }
                
                break;
            case #"hash_3417e35e6adedf86":
                if ( isdefined( level.var_a9ae3ceb ) && level.var_a9ae3ceb )
                {
                    level.var_a9ae3ceb = 0;
                }
                else
                {
                    level.var_a9ae3ceb = 1;
                    level thread function_643aeb5b();
                }
                
                break;
            case #"hash_614f9d774217e602":
                if ( isdefined( level.var_7292cf15 ) && level.var_7292cf15 )
                {
                    level.var_7292cf15 = 0;
                }
                else
                {
                    level.var_7292cf15 = 1;
                    level thread function_ef3f5ee5();
                }
                
                break;
            case #"hash_50d92ca3c6c7c2a8":
                level thread function_4110a06f();
                return 1;
            case #"hash_3ce58f31f72a510f":
                level thread function_9dc8cf3();
                return 1;
            case #"hash_213c0ea9d797b6ea":
                foreach ( player in level.players )
                {
                    player flag::set( #"hash_4246a36eeaccdedb" );
                    player flag::set( #"hash_1e11ea0627c40424" );
                    player flag::set( #"hash_15ea02b45ed633fa" );
                }
                
                return 1;
            case #"hash_237913b2f4a85a44":
                level thread zm_towers_challenges::function_a83b406a();
                return 1;
            case #"lore_room":
                level thread function_5b2f92b3();
                return 1;
            case #"hash_27bc74ddac87b156":
                level thread zm_towers_pap_quest::function_438a415( #"danu" );
                return 1;
            case #"hash_3bb09c753859632b":
                level thread zm_towers_pap_quest::function_438a415( #"ra" );
                return 1;
            case #"hash_40f87ec1dffc67d0":
                level thread zm_towers_pap_quest::function_438a415( #"odin" );
                return 1;
            case #"hash_2ca290409187993b":
                level thread zm_towers_pap_quest::function_438a415( #"zeus" );
                return 1;
            case #"hash_68370bceab1f118":
                level thread zm_towers_pap_quest::function_438a415( #"all" );
                return 1;
            case #"hash_2d60025acca3891":
                level thread zm_towers_pap_quest::function_883e88be( "<dev string:xe20>" );
                return 1;
            case #"force_marauders":
                level thread zm_towers_pap_quest::function_883e88be( "<dev string:xe2d>" );
                return 1;
            case #"force_tigers":
                level thread zm_towers_pap_quest::function_883e88be( "<dev string:xe39>" );
                return 1;
            case #"hash_6aecfc20f8d3ae0d":
                level flag::set( #"hash_3551c4ab09311644" );
                return 1;
            case #"hash_5220b8897cc03896":
                level flag::set( #"hash_392f20a71becaec7" );
                level flag::set( #"hash_3551c4ab09311644" );
                return 1;
            case #"hash_12584bff43cd127a":
                level flag::set( #"hash_17425b597c04b9c3" );
                level flag::set( #"hash_392f20a71becaec7" );
                level flag::set( #"hash_3551c4ab09311644" );
                return 1;
        }
    }

    // Namespace zm_towers/zm_towers
    // Params 0
    // Checksum 0x94c368b9, Offset: 0x6ec0
    // Size: 0x74, Type: dev
    function function_ddb8acde()
    {
        level thread scene::init_streamer( #"cin_zm_ix_outro", #"allies" );
        level setup_end_igc();
        level scene::play( #"cin_zm_ix_outro" );
    }

    // Namespace zm_towers/zm_towers
    // Params 0
    // Checksum 0x3c3d98d1, Offset: 0x6f40
    // Size: 0x5c, Type: dev
    function function_4110a06f()
    {
        zm_devgui::zombie_devgui_open_sesame();
        level zm_towers_pap_quest::function_97e78811( 1, 1 );
        level zm_towers_pap_quest::function_156669dd( 1, 1 );
    }

    // Namespace zm_towers/zm_towers
    // Params 0
    // Checksum 0xad53f21c, Offset: 0x6fa8
    // Size: 0x118, Type: dev
    function function_9dc8cf3()
    {
        foreach ( e_player in level.activeplayers )
        {
            if ( namespace_52d8d460::is_shield_weapon( e_player getcurrentweapon() ) )
            {
                e_player.var_c9d375dc.n_charge_level++;
                e_player clientfield::set( "<dev string:xe1d>" + #"charge_gem", e_player.var_c9d375dc.n_charge_level );
                
                if ( e_player.var_c9d375dc.n_charge_level >= 3 )
                {
                    e_player thread namespace_52d8d460::player_flame_on();
                }
            }
        }
    }

    // Namespace zm_towers/zm_towers
    // Params 1, eflags: 0x4
    // Checksum 0x9b8ad436, Offset: 0x70c8
    // Size: 0x1b4, Type: dev
    function private function_51855e65( round_number )
    {
        var_efac84b3 = array( 0, 500, 1000, 1000, 1400, 4000, 5000, 5500, 5500, 5500, 8000, 8000, 8000, 8000, 9000, 9000, 9000, 9500, 9500, 9500, 9500, 11000, 11000, 11000, 11000, 13000, 13000, 13000, 13000, 14000 );
        round_index = round_number - 1;
        assert( round_index >= 0 && round_index < 30 );
        
        foreach ( player in getplayers() )
        {
            player zm_score::function_c1f146ff( var_efac84b3[ round_index ] );
        }
        
        if ( round_number >= 9 )
        {
            zm_trial_util::open_all_doors();
        }
        
        if ( round_number >= 24 )
        {
            zm_trial_util::function_9c71b46f();
        }
    }

#/
